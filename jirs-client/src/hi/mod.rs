use bincode::deserialize_from;
use bincode::Result;
use flate2::bufread::ZlibDecoder;
use lazy_static::lazy_static;
use serde::de::DeserializeOwned;
use std::io::BufRead;
use syntect::highlighting::ThemeSet;
use syntect::parsing::SyntaxSet;

lazy_static! {
    pub static ref THEME_SET: ThemeSet = integrated_themeset();
    pub static ref SYNTAX_SET: SyntaxSet = integrated_syntaxset();
}

pub static SYNTAX_NAMES: &[&str; 175] = &[
    "Plain Text",
    "ASP",
    "HTML (ASP)",
    "ActionScript",
    "AppleScript",
    "Batch File",
    "NAnt Build File",
    "C#",
    "C++",
    "C",
    "CSS",
    "Clojure",
    "D",
    "DMD Output",
    "Diff",
    "Erlang",
    "HTML (Erlang)",
    "Git Attributes",
    "Git Commit",
    "Git Common",
    "Git Config",
    "Git Ignore",
    "Git Link",
    "Git Log",
    "Git Mailmap",
    "Git Rebase Todo",
    "Go",
    "Graphviz (DOT)",
    "Groovy",
    "HTML",
    "Haskell",
    "Literate Haskell",
    "JSON",
    "Java Server Page (JSP)",
    "Java",
    "Javadoc",
    "Java Properties",
    "JavaScript",
    "Regular Expressions (Javascript)",
    "BibTeX",
    "LaTeX Log",
    "LaTeX",
    "TeX",
    "Lisp",
    "Lua",
    "Make Output",
    "Makefile",
    "Markdown",
    "MultiMarkdown",
    "MATLAB",
    "OCaml",
    "OCamllex",
    "OCamlyacc",
    "camlp4",
    "Objective-C++",
    "Objective-C",
    "PHP Source",
    "PHP",
    "Regular Expressions (PHP)",
    "Pascal",
    "Perl",
    "Python",
    "Regular Expressions (Python)",
    "R Console",
    "R",
    "Rd (R Documentation)",
    "HTML (Rails)",
    "JavaScript (Rails)",
    "Ruby Haml",
    "Ruby on Rails",
    "SQL (Rails)",
    "Regular Expression",
    "reStructuredText",
    "Ruby",
    "Cargo Build Results",
    "Rust",
    "SQL",
    "Scala",
    "Bourne Again Shell (bash)",
    "Shell-Unix-Generic",
    "commands-builtin-shell-bash",
    "HTML (Tcl)",
    "Tcl",
    "Textile",
    "XML",
    "YAML",
    "AWK",
    "Apache Conf",
    "AsciiDoc (Asciidoctor)",
    "ARM Assembly",
    "Assembly (x86_64)",
    "CMake C Header",
    "CMake C++ Header",
    "CMake",
    "CMakeCache",
    "CMakeCommands",
    "Advanced CSV",
    "Cabal",
    "CoffeeScript",
    "CpuInfo",
    "Crystal",
    "Dart Analysis Output",
    "Dart",
    "Dockerfile",
    "DotENV",
    "Elixir",
    "HTML (EEx)",
    "Regular Expressions (Elixir)",
    "Elm Compile Messages",
    "Elm Documentation",
    "Elm",
    "Email",
    "F#",
    "Friendly Interactive Shell (fish)",
    "Fortran (Fixed Form)",
    "Fortran (Modern)",
    "Fortran Namelist",
    "GFortran Build Results",
    "OpenMP (Fortran)",
    "fstab",
    "GLSL",
    "GraphQL",
    "group",
    "HTML (Twig)",
    "hosts",
    "INI",
    "JavaScript (Babel)",
    "HTML (Jinja2)",
    "Jinja2",
    "jsonnet",
    "Julia",
    "Kotlin",
    "Less",
    "Manpage",
    "MemInfo",
    "nginx",
    "Nim",
    "Nix",
    "orgmode",
    "passwd",
    "PowerShell",
    "Protocol Buffer",
    "Protocol Buffer (TEXT)",
    "Puppet",
    "PureScript",
    "QML",
    "Rego",
    "resolv",
    "Robot Framework syntax highlighting.",
    "SCSS",
    "Sass",
    "Salt State (SLS)",
    "SML",
    "Strace",
    "Stylus",
    "Swift",
    "syslog",
    "TOML",
    "JSON (Terraform)",
    "Terraform",
    "TypeScript",
    "TypeScriptReact",
    "Verilog",
    "VimL",
    "Vue Component",
    "requirements.txt",
    "Highlight non-printables",
    "Authorized Keys",
    "Known Hosts",
    "Private Key",
    "SSH Common",
    "SSH Config",
    "SSH Crypto",
    "SSHD Config",
    "varlink",
];

fn from_reader<T: DeserializeOwned, R: BufRead>(input: R) -> Result<T> {
    let mut decoder = ZlibDecoder::new(input);
    deserialize_from(&mut decoder)
}

fn from_binary<T: DeserializeOwned>(v: &[u8]) -> T {
    from_reader(v).unwrap()
}

fn integrated_syntaxset() -> SyntaxSet {
    from_binary(include_bytes!("./syntaxes.fast.bin"))
}

fn integrated_themeset() -> ThemeSet {
    from_binary(include_bytes!("./themes.bin"))
}
