
#![allow(unused_imports)]
#![allow(dead_code)]

use jirs_syntect::{*, parsing::*};
use lazycell::AtomicLazyCell;

#[inline(always)]
pub fn load() -> SyntaxReference {
        SyntaxReference {  name: "Markdown".to_string(),
  file_extensions: vec!["md".to_string(),"mdown".to_string(),"markdown".to_string(),"markdn".to_string()],
  scope: Scope { a: 281496454758400, b: 0 },
  first_line_match: None,
  hidden: false,
  variables: {
    let mut v = std::collections::HashMap::new();
    v.insert("html_tag_close_commonmark".to_string(), "(?xi:\n  </\n  [a-z]             # A tag name consists of an ASCII letter\n  [a-z0-9-]*        # followed by zero or more ASCII letters, digits, or hyphens (-)\n  \\s*\n  >\n)".to_string());
    v.insert("tag_unquoted_attribute_start".to_string(), "(?=[^{{ascii_space}}=/>}])".to_string());
    v.insert("block_quote".to_string(), "(?:[ ]{,3}>(?:.|$))".to_string());
    v.insert("code_fence_escape".to_string(), "(?x:\n  ^             # the beginning of the line\n  [ \\t]*\n  (\n    \\2          # the backtick/tilde combination that opened the code fence\n    (?:\\3|\\4)*  # plus optional additional closing characters\n  )\n  \\s*$          # any amount of whitespace until EOL\n)".to_string());
    v.insert("skip_html_tags".to_string(), "(?:<[^>]+>)".to_string());
    v.insert("balanced_table_cell".to_string(), "(?x:\n  (?:\n    {{balance_square_brackets_pipes_and_emphasis}}\n  | {{balanced_emphasis}}\n  )+                                # at least one character\n)".to_string());
    v.insert("balance_square_brackets_pipes_and_emphasis".to_string(), "(?x:\n  (?:\n    {{escape}}+                     # escape characters\n  | [^\\[\\]`\\\\_*|]+(?=[\\[\\]`\\\\_*|]|$)  # anything that isn\'t a square bracket, a backtick, the start of an escape character, or an emphasis character\n  | {{backticks}}                   # inline code\n  | \\[(?:                           # nested square brackets (one level deep)\n        [^\\[\\]`]+(?=[\\[\\]`])        #  anything that isn\'t a square bracket or a backtick\n        {{backticks}}?              #  balanced backticks\n      )*\\]                          #  closing square bracket\n  )+                                # at least one character\n)".to_string());
    v.insert("tag_attribute_name_break".to_string(), "(?=[{{ascii_space}}=/>}])".to_string());
    v.insert("ascii_space".to_string(), "\\t\\n\\f ".to_string());
    v.insert("html_entity".to_string(), "&([a-zA-Z0-9]+|#\\d+|#x\\h+);".to_string());
    v.insert("tag_attribute_name_start".to_string(), "(?=[^{{ascii_space}}=/>}])".to_string());
    v.insert("indented_code_block".to_string(), "(?:[ ]{4}|\\t)".to_string());
    v.insert("atx_heading".to_string(), "(?:[#]{1,6}\\s*)".to_string());
    v.insert("list_item".to_string(), "(?:[ ]{,3}(?=\\d+\\.|[*+-])\\d*([*+.-])\\s)".to_string());
    v.insert("balance_square_brackets".to_string(), "(?x:\n  (?:\n    {{escape}}+                 # escape characters\n  | [^\\[\\]`\\\\]+(?=[\\[\\]`\\\\]|$)  # anything that isn\'t a square bracket or a backtick or the start of an escape character\n  | {{backticks}}               # inline code\n  | \\[(?:                       # nested square brackets (one level deep)\n        [^\\[\\]`]+(?=[\\[\\]`])    #  anything that isn\'t a square bracket or a backtick\n        {{backticks}}?          #  balanced backticks\n      )*\\]                      #  closing square bracket\n  )+                            # at least one character\n)".to_string());
    v.insert("balance_square_brackets_and_emphasis".to_string(), "(?x:\n  (?:\n    {{escape}}+                     # escape characters\n  | [^\\[\\]`\\\\_*]+(?=[\\[\\]`\\\\_*]|$)  # anything that isn\'t a square bracket, a backtick, the start of an escape character, or an emphasis character\n  | {{backticks}}                   # inline code\n  | \\[(?:                           # nested square brackets (one level deep)\n        [^\\[\\]`]+(?=[\\[\\]`])        #  anything that isn\'t a square bracket or a backtick\n        {{backticks}}?              #  balanced backticks\n      )*\\]                          #  closing square bracket\n  )+                                # at least one character\n)".to_string());
    v.insert("html_tag_block_end_at_blank_line".to_string(), "(?x:\n  /?\n  (?i:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)\n  (?:\\s|$|/?>)\n)".to_string());
    v.insert("tag_unquoted_attribute_break".to_string(), "(?=[{{ascii_space}}}]|/?>)".to_string());
    v.insert("thematic_break".to_string(), "(?x:\n    [ ]{,3}                          # between 0 to 3 spaces\n    (?:                              # followed by one of the following:\n            [-](?:[ ]{,2}[-]){2,}    # - a dash,        followed by the following at least twice: between 0 to 2 spaces followed by a dash\n        |   [*](?:[ ]{,2}[*]){2,}    # - a star,        followed by the following at least twice: between 0 to 2 spaces followed by a star\n        |   [_](?:[ ]{,2}[_]){2,}    # - an underscore, followed by the following at least twice: between 0 to 2 spaces followed by an underscore\n    )\n    [ \\t]*$                          # followed by any number of tabs or spaces, followed by the end of the line\n)".to_string());
    v.insert("html_tag_open_commonmark".to_string(), "(?xi:\n  <\n  [a-z]             # A tag name consists of an ASCII letter\n  [a-z0-9-]*        # followed by zero or more ASCII letters, digits, or hyphens (-)\n  (?:               # An attribute consists of whitespace, an attribute name, and an optional attribute value specification\n    \\s+\n    [a-z_:]         # An attribute name consists of an ASCII letter, _, or :\n    [a-z0-9_.:-]*   # followed by zero or more ASCII letters, digits, _, ., :, or -\n    (?:             # An attribute value specification consists of optional whitespace, a = character, optional whitespace, and an attribute value\n      \\s*\n      =\n      \\s*\n      (?:\n        [^ @\'=<>`]+ # An unquoted attribute value is a nonempty string of characters not including spaces, \", \', =, <, >, or `\n      | \'[^\']*\'     # A single-quoted attribute value consists of \', zero or more characters not including \', and a final \'\n      | \"[^\"]*\"     # A double-quoted attribute value consists of \", zero or more characters not including \", and a final \"\n      )\n    )?\n  )*\n  \\s*\n  /?\n  >\n)".to_string());
    v.insert("table_first_row".to_string(), "(?x:\n    (?:{{balanced_table_cell}}?\\|){2}           # at least 2 non-escaped pipe chars on the line\n|   (?!\\s+\\|){{balanced_table_cell}}\\|(?!\\s+$)  # something other than whitespace followed by a pipe char, followed by something other than whitespace and the end of the line\n)".to_string());
    v.insert("balanced_emphasis".to_string(), "(?x:\n    \\*  (?!\\*){{balance_square_brackets_and_emphasis}}+\\*  (?!\\*)\n|   \\*\\*      {{balance_square_brackets_and_emphasis}}+\\*\\*\n|   _   (?!_) {{balance_square_brackets_and_emphasis}}+_   (?!_)\n|   __        {{balance_square_brackets_and_emphasis}}+__\n)".to_string());
    v.insert("escape".to_string(), "\\\\[-`*_#+.!(){}\\[\\]\\\\>|~]".to_string());
    v.insert("backticks".to_string(), "(?x:\n    (`{4})(?![\\s`])(?:[^`]+(?=`)|(?!`{4})`+(?!`))+(`{4})(?!`)  # 4 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 4 backticks, or at least one non backtick character) at least once, followed by exactly 4 backticks\n|   (`{3})(?![\\s`])(?:[^`]+(?=`)|(?!`{3})`+(?!`))+(`{3})(?!`)  # 3 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 3 backticks, or at least one non backtick character) at least once, followed by exactly 3 backticks\n|   (`{2})(?![\\s`])(?:[^`]+(?=`)|(?!`{2})`+(?!`))+(`{2})(?!`)  # 2 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 2 backticks, or at least one non backtick character) at least once, followed by exactly 2 backticks\n|   (`{1})(?![\\s`])(?:[^`]+(?=`)|(?!`{1})`+(?!`))+(`{1})(?!`)  # 1 backtick,  followed by at least one non whitespace, non backtick character, followed by (                          at least one non backtick character) at least once, followed by exactly 1 backtick\n)".to_string());
    v.insert("fenced_code_block_trailing_infostring_characters".to_string(), "(?x:\n  (\n    \\s*        # any whitespace, or ..\n  |\n    \\s[^`]*    # any characters (except backticks), separated by whitespace ...\n  )\n  $\\n?         # ... until EOL\n)".to_string());
    v.insert("fenced_code_block_start".to_string(), "(?x:\n  ([ \\t]*)\n  (\n    (`){3,}    #   3 or more backticks\n    (?![^`]*`) #   not followed by any more backticks on the same line\n  |            # or\n    (~){3,}    #   3 or more tildas\n    (?![^~]*~) #   not followed by any more tildas on the same line\n  )\n  \\s*          # allow for whitespace between code block start and info string\n)".to_string());
    v.insert("html_tag_block_end_at_close_tag".to_string(), "(?xi:\n  (script|style|pre)\\b\n)".to_string());
    v
  },
  contexts: {
    let mut v = std::collections::HashMap::new();
    v.insert("#anon_link-title_1".to_string(), ContextId { index: 3276 });
    v.insert("#anon_main_1".to_string(), ContextId { index: 3287 });
    v.insert("disable-markdown-pop-at-tag".to_string(), ContextId { index: 3321 });
    v.insert("link-text".to_string(), ContextId { index: 3356 });
    v.insert("#anon_fenced-code-block_29".to_string(), ContextId { index: 3242 });
    v.insert("#anon_fenced-code-block_16".to_string(), ContextId { index: 3228 });
    v.insert("inline-bold-italic".to_string(), ContextId { index: 3338 });
    v.insert("#anon_fenced-code-block_32".to_string(), ContextId { index: 3246 });
    v.insert("#anon_bold_5".to_string(), ContextId { index: 3216 });
    v.insert("#anon_strikethrough_0".to_string(), ContextId { index: 3292 });
    v.insert("#anon_list-content_1".to_string(), ContextId { index: 3279 });
    v.insert("disabled-markdown-pop-at-eol".to_string(), ContextId { index: 3322 });
    v.insert("link-inline-attr".to_string(), ContextId { index: 3344 });
    v.insert("#anon_list-paragraph_0".to_string(), ContextId { index: 3280 });
    v.insert("#anon_bold_3".to_string(), ContextId { index: 3214 });
    v.insert("link-ref-def".to_string(), ContextId { index: 3349 });
    v.insert("#anon_fenced-code-block_15".to_string(), ContextId { index: 3227 });
    v.insert("#anon_tag-attr-value_1".to_string(), ContextId { index: 3299 });
    v.insert("#anon_fenced-code-block_31".to_string(), ContextId { index: 3245 });
    v.insert("disable-markdown-pop-after-html-doctype".to_string(), ContextId { index: 3317 });
    v.insert("#anon_list-paragraph_3".to_string(), ContextId { index: 3283 });
    v.insert("#anon_fenced-code-block_9".to_string(), ContextId { index: 3260 });
    v.insert("inline".to_string(), ContextId { index: 3337 });
    v.insert("table".to_string(), ContextId { index: 3364 });
    v.insert("#anon_fenced-code-block_10".to_string(), ContextId { index: 3222 });
    v.insert("bracket".to_string(), ContextId { index: 3313 });
    v.insert("#anon_list-content_0".to_string(), ContextId { index: 3278 });
    v.insert("link-inline".to_string(), ContextId { index: 3342 });
    v.insert("#anon_italic_0".to_string(), ContextId { index: 3266 });
    v.insert("tag-attr-equals".to_string(), ContextId { index: 3365 });
    v.insert("disable-markdown-pop-after-tag".to_string(), ContextId { index: 3318 });
    v.insert("#anon_link-title_0".to_string(), ContextId { index: 3275 });
    v.insert("#anon_table_4".to_string(), ContextId { index: 3297 });
    v.insert("immediately-pop".to_string(), ContextId { index: 3335 });
    v.insert("#anon_fenced-code-block_13".to_string(), ContextId { index: 3225 });
    v.insert("#anon_tag-attr-value_0".to_string(), ContextId { index: 3298 });
    v.insert("__main".to_string(), ContextId { index: 3302 });
    v.insert("#anon_fenced-code-block_34".to_string(), ContextId { index: 3248 });
    v.insert("strikethrough".to_string(), ContextId { index: 3363 });
    v.insert("#anon_bold_0".to_string(), ContextId { index: 3211 });
    v.insert("#anon_link-inline-after-text_0".to_string(), ContextId { index: 3268 });
    v.insert("#anon_fenced-code-block_37".to_string(), ContextId { index: 3251 });
    v.insert("#anon_fenced-code-block_35".to_string(), ContextId { index: 3249 });
    v.insert("#anon_list-paragraph_5".to_string(), ContextId { index: 3285 });
    v.insert("bold-italic-trailing".to_string(), ContextId { index: 3312 });
    v.insert("#anon_image-inline-after-text_0".to_string(), ContextId { index: 3261 });
    v.insert("#anon_fenced-code-block_23".to_string(), ContextId { index: 3236 });
    v.insert("link-ref-footnote".to_string(), ContextId { index: 3350 });
    v.insert("link-ref-link-text".to_string(), ContextId { index: 3351 });
    v.insert("#anon_fenced-code-block_36".to_string(), ContextId { index: 3250 });
    v.insert("#anon_list-paragraph_4".to_string(), ContextId { index: 3284 });
    v.insert("fenced-code-block".to_string(), ContextId { index: 3325 });
    v.insert("image-inline-attr".to_string(), ContextId { index: 3329 });
    v.insert("image-inline-after-text".to_string(), ContextId { index: 3328 });
    v.insert("#anon_thematic-break_0".to_string(), ContextId { index: 3301 });
    v.insert("else-pop".to_string(), ContextId { index: 3323 });
    v.insert("image-inline".to_string(), ContextId { index: 3327 });
    v.insert("#anon_fenced-code-block_6".to_string(), ContextId { index: 3257 });
    v.insert("link-ref-literal".to_string(), ContextId { index: 3352 });
    v.insert("#anon_fenced-code-block_4".to_string(), ContextId { index: 3254 });
    v.insert("escape".to_string(), ContextId { index: 3324 });
    v.insert("link-ref-literal-attr".to_string(), ContextId { index: 3354 });
    v.insert("code-span".to_string(), ContextId { index: 3314 });
    v.insert("disable-markdown".to_string(), ContextId { index: 3315 });
    v.insert("#anon_fenced-code-block_0".to_string(), ContextId { index: 3220 });
    v.insert("after-link-title".to_string(), ContextId { index: 3304 });
    v.insert("list-content".to_string(), ContextId { index: 3359 });
    v.insert("indented-code-block".to_string(), ContextId { index: 3336 });
    v.insert("#anon_block-quote_1".to_string(), ContextId { index: 3206 });
    v.insert("#anon_block-quote_4".to_string(), ContextId { index: 3209 });
    v.insert("#anon_italic_1".to_string(), ContextId { index: 3267 });
    v.insert("#anon_main_3".to_string(), ContextId { index: 3289 });
    v.insert("image-link-text".to_string(), ContextId { index: 3330 });
    v.insert("#anon_fenced-code-block_28".to_string(), ContextId { index: 3241 });
    v.insert("disable-markdown-pop-after-cdata".to_string(), ContextId { index: 3316 });
    v.insert("#anon_list-paragraph_1".to_string(), ContextId { index: 3281 });
    v.insert("tag-attributes".to_string(), ContextId { index: 3369 });
    v.insert("link-text-allow-image".to_string(), ContextId { index: 3357 });
    v.insert("#anon_main_0".to_string(), ContextId { index: 3286 });
    v.insert("link-ref".to_string(), ContextId { index: 3346 });
    v.insert("#anon_bold_7".to_string(), ContextId { index: 3218 });
    v.insert("link-inline-after-text".to_string(), ContextId { index: 3343 });
    v.insert("raw".to_string(), ContextId { index: 3362 });
    v.insert("#anon_fenced-code-block_7".to_string(), ContextId { index: 3258 });
    v.insert("#anon_link-inline-after-text_1".to_string(), ContextId { index: 3269 });
    v.insert("tag-attr-name".to_string(), ContextId { index: 3367 });
    v.insert("#anon_autolink-inet_1".to_string(), ContextId { index: 3204 });
    v.insert("#anon_bold_6".to_string(), ContextId { index: 3217 });
    v.insert("#anon_fenced-code-block_11".to_string(), ContextId { index: 3223 });
    v.insert("#anon_image-ref-attr_0".to_string(), ContextId { index: 3265 });
    v.insert("#anon_tag-attr-value_2".to_string(), ContextId { index: 3300 });
    v.insert("#anon_block-quote_0".to_string(), ContextId { index: 3205 });
    v.insert("#anon_fenced-code-block_2".to_string(), ContextId { index: 3232 });
    v.insert("#anon_block-quote_2".to_string(), ContextId { index: 3207 });
    v.insert("#anon_image-inline-after-text_2".to_string(), ContextId { index: 3263 });
    v.insert("link-inline-link-text".to_string(), ContextId { index: 3345 });
    v.insert("#anon_fenced-code-block_12".to_string(), ContextId { index: 3224 });
    v.insert("#anon_table_0".to_string(), ContextId { index: 3293 });
    v.insert("#anon_table_1".to_string(), ContextId { index: 3294 });
    v.insert("#anon_fenced-code-block_33".to_string(), ContextId { index: 3247 });
    v.insert("#anon_main_2".to_string(), ContextId { index: 3288 });
    v.insert("main".to_string(), ContextId { index: 3361 });
    v.insert("#anon_fenced-code-block_38".to_string(), ContextId { index: 3252 });
    v.insert("list-paragraph".to_string(), ContextId { index: 3360 });
    v.insert("#anon_atx-heading_0".to_string(), ContextId { index: 3200 });
    v.insert("#anon_link-title_2".to_string(), ContextId { index: 3277 });
    v.insert("autolink-email".to_string(), ContextId { index: 3308 });
    v.insert("image-ref-attr".to_string(), ContextId { index: 3333 });
    v.insert("#anon_fenced-code-block_26".to_string(), ContextId { index: 3239 });
    v.insert("link-ref-after-text".to_string(), ContextId { index: 3347 });
    v.insert("#anon_fenced-code-block_8".to_string(), ContextId { index: 3259 });
    v.insert("tag-attr-value".to_string(), ContextId { index: 3368 });
    v.insert("image-ref-after-text".to_string(), ContextId { index: 3332 });
    v.insert("#anon_link-text_0".to_string(), ContextId { index: 3274 });
    v.insert("image-ref-text".to_string(), ContextId { index: 3334 });
    v.insert("#anon_fenced-code-block_20".to_string(), ContextId { index: 3233 });
    v.insert("#anon_bold_2".to_string(), ContextId { index: 3213 });
    v.insert("ampersand".to_string(), ContextId { index: 3305 });
    v.insert("ligatures".to_string(), ContextId { index: 3341 });
    v.insert("hard-line-break".to_string(), ContextId { index: 3326 });
    v.insert("link-ref-attr".to_string(), ContextId { index: 3348 });
    v.insert("#anon_fenced-code-block_30".to_string(), ContextId { index: 3244 });
    v.insert("#anon_fenced-code-block_18".to_string(), ContextId { index: 3230 });
    v.insert("#anon_image-inline-after-text_1".to_string(), ContextId { index: 3262 });
    v.insert("#anon_link-ref-literal-attr_0".to_string(), ContextId { index: 3273 });
    v.insert("image-ref".to_string(), ContextId { index: 3331 });
    v.insert("link-ref-literal-link-text".to_string(), ContextId { index: 3355 });
    v.insert("atx-heading".to_string(), ContextId { index: 3306 });
    v.insert("#anon_image-inline-attr_0".to_string(), ContextId { index: 3264 });
    v.insert("#anon_fenced-code-block_1".to_string(), ContextId { index: 3221 });
    v.insert("#anon_raw_0".to_string(), ContextId { index: 3291 });
    v.insert("disable-markdown-pop-at-php".to_string(), ContextId { index: 3320 });
    v.insert("#anon_fenced-code-block_22".to_string(), ContextId { index: 3235 });
    v.insert("#anon_bold_4".to_string(), ContextId { index: 3215 });
    v.insert("#anon_atx-heading_1".to_string(), ContextId { index: 3201 });
    v.insert("#anon_atx-heading_2".to_string(), ContextId { index: 3202 });
    v.insert("#anon_bold_1".to_string(), ContextId { index: 3212 });
    v.insert("#anon_autolink-inet_0".to_string(), ContextId { index: 3203 });
    v.insert("#anon_fenced-code-block_14".to_string(), ContextId { index: 3226 });
    v.insert("#anon_fenced-code-block_21".to_string(), ContextId { index: 3234 });
    v.insert("#anon_block-quote_5".to_string(), ContextId { index: 3210 });
    v.insert("#anon_fenced-code-block_3".to_string(), ContextId { index: 3243 });
    v.insert("#anon_fenced-code-block_5".to_string(), ContextId { index: 3256 });
    v.insert("#anon_fenced-code-block_24".to_string(), ContextId { index: 3237 });
    v.insert("#anon_link-ref-attr_0".to_string(), ContextId { index: 3272 });
    v.insert("#anon_fenced-code-block_40".to_string(), ContextId { index: 3255 });
    v.insert("#anon_list-paragraph_2".to_string(), ContextId { index: 3282 });
    v.insert("#anon_main_4".to_string(), ContextId { index: 3290 });
    v.insert("#anon_table_2".to_string(), ContextId { index: 3295 });
    v.insert("#anon_table_3".to_string(), ContextId { index: 3296 });
    v.insert("__start".to_string(), ContextId { index: 3303 });
    v.insert("bold".to_string(), ContextId { index: 3311 });
    v.insert("link-ref-literal-after-text".to_string(), ContextId { index: 3353 });
    v.insert("autolink-inet".to_string(), ContextId { index: 3309 });
    v.insert("link-title".to_string(), ContextId { index: 3358 });
    v.insert("#anon_fenced-code-block_19".to_string(), ContextId { index: 3231 });
    v.insert("#anon_fenced-code-block_25".to_string(), ContextId { index: 3238 });
    v.insert("italic".to_string(), ContextId { index: 3340 });
    v.insert("#anon_code-span_0".to_string(), ContextId { index: 3219 });
    v.insert("#anon_fenced-code-block_27".to_string(), ContextId { index: 3240 });
    v.insert("inline-bold-italic-linebreak".to_string(), ContextId { index: 3339 });
    v.insert("block-quote".to_string(), ContextId { index: 3310 });
    v.insert("#anon_fenced-code-block_39".to_string(), ContextId { index: 3253 });
    v.insert("tag-attr-meta".to_string(), ContextId { index: 3366 });
    v.insert("#anon_link-inline-attr_0".to_string(), ContextId { index: 3271 });
    v.insert("#anon_fenced-code-block_17".to_string(), ContextId { index: 3229 });
    v.insert("#anon_link-inline-after-text_2".to_string(), ContextId { index: 3270 });
    v.insert("thematic-break".to_string(), ContextId { index: 3370 });
    v.insert("atx-heading-terminator".to_string(), ContextId { index: 3307 });
    v.insert("#anon_block-quote_3".to_string(), ContextId { index: 3208 });
    v.insert("disable-markdown-pop-at-blank-line".to_string(), ContextId { index: 3319 });
    v
  }
} }