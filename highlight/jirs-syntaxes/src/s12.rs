
#![allow(unused_imports)]
#![allow(dead_code)]

use jirs_syntect::{*, parsing::*};
use lazycell::AtomicLazyCell;

#[inline(always)]
pub fn load() -> SyntaxReference {
        SyntaxReference {  name: "D".to_string(),
  file_extensions: vec!["d".to_string(),"di".to_string()],
  scope: Scope { a: 844493649608704, b: 0 },
  first_line_match: Some("^#!.*\\bg?dmd\\b.".to_string()),
  hidden: false,
  variables: {
    let mut v = std::collections::HashMap::new();
    v.insert("attributes".to_string(), "static|abstract|final|override|synchronized|scope|__gshared|nothrow|pure|ref|return|auto".to_string());
    v.insert("attribute_lookahead".to_string(), "(?=@|\\b({{attributes}}|extern|align|deprecated|pragma|private|protected|public|export|package)\\b)".to_string());
    v.insert("bin_digits".to_string(), "(?:[01][01_]*)".to_string());
    v.insert("escape_sequence".to_string(), "\\\\([\'\"?\\\\0abfnrtv]|x\\h{2}|[0-7]{1,3}|u\\h{4}|U\\h{8}|&\\w+;)".to_string());
    v.insert("dec_exponent".to_string(), "(?:[eE]{{exponent}})".to_string());
    v.insert("hex_exponent".to_string(), "(?:[pP]{{exponent}})".to_string());
    v.insert("identifier_ref".to_string(), "\\.?\\s*{{name}}(\\s*\\.\\s*{{name}})*".to_string());
    v.insert("parameter_attribute_lookahead".to_string(), "(?=\\b({{parameter_attribute}})\\b)".to_string());
    v.insert("type_qualifier".to_string(), "const|immutable|inout|shared".to_string());
    v.insert("dec_digits".to_string(), "(?:\\d[\\d_]*)".to_string());
    v.insert("language_constant".to_string(), "null|true|false|__FILE__|__FILE_FULL_PATH__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__|__DATE__|__EOF__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__|__ctfe".to_string());
    v.insert("integer_float_suffix".to_string(), "[fFL]".to_string());
    v.insert("operator_overloads".to_string(), "opNeg|opCom|opPostInc|opPostDec|opCast|opAdd|opSub|opSub_r|opMul|opDiv|opDiv_r|opMod|opMod_r|opAnd|opOr|opXor|opShl|opShl_r|opShr|opShr_r|opUShr|opUShr_r|opCat|opCat_r|opEquals|opEquals|opCmp|opCmp|opCmp|opCmp|opAddAssign|opSubAssign|opMulAssign|opDivAssign|opModAssign|opAndAssign|opOrAssign|opXorAssign|opShlAssign|opShrAssign|opUShrAssign|opCatAssign|opIndex|opIndexAssign|opCall|opSlice|opSliceAssign|opPos|opAdd_r|opMul_r|opAnd_r|opOr_r|opXor_r".to_string());
    v.insert("name".to_string(), "[[:alpha:]_][[:alpha:]0-9_]*".to_string());
    v.insert("keyword".to_string(), "else|enum|export|extern|debug|default|delegate|delete|deprecated|do|body|break|case|cast|catch|class|const|continue|abstract|alias|align|asm|assert|auto|final|finally|for|foreach|foreach_reverse|function|goto|if|immutable|import|in|inout|interface|invariant|is|lazy|macro|mixin|module|new|nothrow|out|override|package|pragma|private|protected|public|pure|ref|return|scope|shared|static|struct|switch|synchronized|template|throw|try|typeid|typeof|union|unittest|version|while|with|__gshared|__traits|__vector|__parameters".to_string());
    v.insert("string_postfix".to_string(), "[cwd]?".to_string());
    v.insert("function_attribute_lookahead".to_string(), "{{attribute_lookahead}}|{{type_qualifier_lookahead}}".to_string());
    v.insert("at_attributes".to_string(), "disable|nogc|property|safe|system|trusted".to_string());
    v.insert("construction_lookahead".to_string(), "(?=~?\\s*this\\s*\\()".to_string());
    v.insert("integer_lookahead".to_string(), "(?=\\b\\d)".to_string());
    v.insert("basic_type".to_string(), "bool|byte|cdouble|cent|cfloat|char|creal|dchar|double|float|idouble|ifloat|int|ireal|long|real|short|ubyte|ucent|uint|ulong|ushort|void|wchar|string|dstring|wstring".to_string());
    v.insert("integer_suffix".to_string(), "L[uU]|[uU]L|[LuU]".to_string());
    v.insert("block_statement_loohahead".to_string(), "(?={)".to_string());
    v.insert("reserved".to_string(), "{{keyword}}|{{basic_type}}|{{language_constant}}|{{language_variable}}".to_string());
    v.insert("parameter_attribute".to_string(), "in|lazy|out|alias".to_string());
    v.insert("string_lookahead".to_string(), "(?=`|[rxq]?\"|q{)".to_string());
    v.insert("definitely_value_lookahead".to_string(), "(?=!|~|\\+|\\-|\\*|&|\\bcast\\b|\\bdelete\\b|\\bnew\\b|\\bimport\\b|\\bmixin\\b|\\bis\\b|\\b__traits\\b|\\bfunction\\b|\\bdelegate\\b|[0-9]|\\[|\\(|{{string_lookahead}}|\\b({{language_constant}})\\b|\\b({{language_variable}})\\b)".to_string());
    v.insert("hex_digits".to_string(), "(?:\\h[\\h_]*)".to_string());
    v.insert("imaginary_suffix".to_string(), "[fFL]?i".to_string());
    v.insert("number_lookahead".to_string(), "(?=(\\b|\\.)\\d)".to_string());
    v.insert("type_qualifier_lookahead".to_string(), "(?=\\b({{type_qualifier}})\\b)".to_string());
    v.insert("dec_integer".to_string(), "(?:0_*|[1-9][0-9_]*)".to_string());
    v.insert("exponent".to_string(), "[-+]??\\d+".to_string());
    v.insert("definitely_declaration_lookahead".to_string(), "(?=({{name}}|\\]|\\))(\\s+{{name}})|\\b({{type_qualifier}})\\b)".to_string());
    v.insert("name_lookahead".to_string(), "(?=\\b{{name}}\\b)".to_string());
    v.insert("language_variable".to_string(), "this|super".to_string());
    v.insert("float_suffix".to_string(), "[fF]".to_string());
    v.insert("character_lookahead".to_string(), "(?=\')".to_string());
    v
  },
  contexts: {
    let mut v = std::collections::HashMap::new();
    v.insert("constructor-argument-list".to_string(), ContextId { index: 1214 });
    v.insert("catch-arguments".to_string(), ContextId { index: 1197 });
    v.insert("meta-enum".to_string(), ContextId { index: 1284 });
    v.insert("function-definition-after-arguments".to_string(), ContextId { index: 1251 });
    v.insert("prototype".to_string(), ContextId { index: 1314 });
    v.insert("alias-new-after-type".to_string(), ContextId { index: 1171 });
    v.insert("#anon_alias-new-after-type_0".to_string(), ContextId { index: 1076 });
    v.insert("#anon_flow-statement-in_2".to_string(), ContextId { index: 1104 });
    v.insert("conditional-declaration-in".to_string(), ContextId { index: 1210 });
    v.insert("debug-condition".to_string(), ContextId { index: 1216 });
    v.insert("alias-new".to_string(), ContextId { index: 1170 });
    v.insert("enum-after-kw".to_string(), ContextId { index: 1222 });
    v.insert("try-in".to_string(), ContextId { index: 1334 });
    v.insert("#anon_nested-comment_0".to_string(), ContextId { index: 1121 });
    v.insert("for-arguments".to_string(), ContextId { index: 1240 });
    v.insert("#anon_switch-in_0".to_string(), ContextId { index: 1137 });
    v.insert("#anon_first-value-after_0".to_string(), ContextId { index: 1100 });
    v.insert("#anon_type-specialization_1".to_string(), ContextId { index: 1145 });
    v.insert("#anon_function-argument_0".to_string(), ContextId { index: 1108 });
    v.insert("#anon_switch-in_1".to_string(), ContextId { index: 1138 });
    v.insert("deprecated-attribute-after".to_string(), ContextId { index: 1217 });
    v.insert("#anon_function-type-argument_0".to_string(), ContextId { index: 1113 });
    v.insert("#anon_tokens-in_2".to_string(), ContextId { index: 1142 });
    v.insert("foreach-parameter-after-type".to_string(), ContextId { index: 1244 });
    v.insert("base-class-list-after".to_string(), ContextId { index: 1187 });
    v.insert("#anon_value_9".to_string(), ContextId { index: 1163 });
    v.insert("alias-new-assign".to_string(), ContextId { index: 1172 });
    v.insert("foreach-arguments-end".to_string(), ContextId { index: 1243 });
    v.insert("#anon_function-out-contract_0".to_string(), ContextId { index: 1110 });
    v.insert("#anon_type-specialization_3".to_string(), ContextId { index: 1147 });
    v.insert("import-list".to_string(), ContextId { index: 1269 });
    v.insert("constructor-argument-list-after-value".to_string(), ContextId { index: 1215 });
    v.insert("enum-assignment-after".to_string(), ContextId { index: 1224 });
    v.insert("#anon_debug-condition_0".to_string(), ContextId { index: 1095 });
    v.insert("#anon_basic-type2_0".to_string(), ContextId { index: 1085 });
    v.insert("optional-template-body-block".to_string(), ContextId { index: 1309 });
    v.insert("#anon_enum-assignment-after_0".to_string(), ContextId { index: 1097 });
    v.insert("#anon_class-name_0".to_string(), ContextId { index: 1092 });
    v.insert("alias-this-after".to_string(), ContextId { index: 1174 });
    v.insert("enum-in".to_string(), ContextId { index: 1226 });
    v.insert("scope-in".to_string(), ContextId { index: 1315 });
    v.insert("value-after".to_string(), ContextId { index: 1346 });
    v.insert("#anon_attribute_3".to_string(), ContextId { index: 1084 });
    v.insert("__start".to_string(), ContextId { index: 1168 });
    v.insert("invariant-block".to_string(), ContextId { index: 1276 });
    v.insert("number-opt".to_string(), ContextId { index: 1306 });
    v.insert("function-out-contract".to_string(), ContextId { index: 1257 });
    v.insert("basic-type2".to_string(), ContextId { index: 1189 });
    v.insert("with-after".to_string(), ContextId { index: 1366 });
    v.insert("#anon_value-after_0".to_string(), ContextId { index: 1151 });
    v.insert("#anon_block-statement_0".to_string(), ContextId { index: 1088 });
    v.insert("extern-attribute-after".to_string(), ContextId { index: 1231 });
    v.insert("union-in".to_string(), ContextId { index: 1342 });
    v.insert("#anon_alias-in_0".to_string(), ContextId { index: 1075 });
    v.insert("#anon_invariant-block_0".to_string(), ContextId { index: 1116 });
    v.insert("value-group-after".to_string(), ContextId { index: 1353 });
    v.insert("version-condition".to_string(), ContextId { index: 1365 });
    v.insert("string".to_string(), ContextId { index: 1320 });
    v.insert("#anon_identifier_0".to_string(), ContextId { index: 1114 });
    v.insert("attribute".to_string(), ContextId { index: 1181 });
    v.insert("#anon_type_0".to_string(), ContextId { index: 1148 });
    v.insert("#anon_value-identifier_0".to_string(), ContextId { index: 1152 });
    v.insert("import-list-after-assignment".to_string(), ContextId { index: 1270 });
    v.insert("synchronized-after".to_string(), ContextId { index: 1327 });
    v.insert("value-group-after-parens".to_string(), ContextId { index: 1355 });
    v.insert("#anon_string-opt_10".to_string(), ContextId { index: 1127 });
    v.insert("interface-name".to_string(), ContextId { index: 1275 });
    v.insert("loop-in".to_string(), ContextId { index: 1280 });
    v.insert("#anon_case-after_1".to_string(), ContextId { index: 1090 });
    v.insert("optional-block-statement".to_string(), ContextId { index: 1307 });
    v.insert("#anon_string-opt_2".to_string(), ContextId { index: 1128 });
    v.insert("function-or-variable-after-type".to_string(), ContextId { index: 1256 });
    v.insert("new-after".to_string(), ContextId { index: 1295 });
    v.insert("meta-function".to_string(), ContextId { index: 1285 });
    v.insert("#anon_string-opt_6".to_string(), ContextId { index: 1132 });
    v.insert("#anon_value_6".to_string(), ContextId { index: 1160 });
    v.insert("synchronized-in".to_string(), ContextId { index: 1328 });
    v.insert("conditional-declaration-after-parens".to_string(), ContextId { index: 1208 });
    v.insert("__main".to_string(), ContextId { index: 1167 });
    v.insert("maybe-end-of-line".to_string(), ContextId { index: 1282 });
    v.insert("function-definition-begin".to_string(), ContextId { index: 1255 });
    v.insert("meta-class".to_string(), ContextId { index: 1283 });
    v.insert("#anon_string-opt_3".to_string(), ContextId { index: 1129 });
    v.insert("block-statement".to_string(), ContextId { index: 1193 });
    v.insert("interface-in".to_string(), ContextId { index: 1274 });
    v.insert("not-whitespace-illegal".to_string(), ContextId { index: 1302 });
    v.insert("#anon_string-opt_8".to_string(), ContextId { index: 1134 });
    v.insert("first-value-after".to_string(), ContextId { index: 1233 });
    v.insert("attribute-specifier-after".to_string(), ContextId { index: 1184 });
    v.insert("integer-opt".to_string(), ContextId { index: 1272 });
    v.insert("statement-list-in".to_string(), ContextId { index: 1317 });
    v.insert("function-argument-or-type".to_string(), ContextId { index: 1249 });
    v.insert("module-in".to_string(), ContextId { index: 1293 });
    v.insert("flow-statement-in".to_string(), ContextId { index: 1239 });
    v.insert("condition".to_string(), ContextId { index: 1206 });
    v.insert("nested-comment".to_string(), ContextId { index: 1294 });
    v.insert("template-in".to_string(), ContextId { index: 1331 });
    v.insert("identifier-ref".to_string(), ContextId { index: 1265 });
    v.insert("meta-union".to_string(), ContextId { index: 1290 });
    v.insert("attribute-parens-after".to_string(), ContextId { index: 1183 });
    v.insert("#anon_type-identifier_0".to_string(), ContextId { index: 1143 });
    v.insert("#anon_value_7".to_string(), ContextId { index: 1161 });
    v.insert("assert-arguments-after".to_string(), ContextId { index: 1179 });
    v.insert("#anon_value_10".to_string(), ContextId { index: 1155 });
    v.insert("#anon_with-in_0".to_string(), ContextId { index: 1166 });
    v.insert("foreach-arguments".to_string(), ContextId { index: 1241 });
    v.insert("string-opt".to_string(), ContextId { index: 1322 });
    v.insert("character".to_string(), ContextId { index: 1199 });
    v.insert("template-definition-begin".to_string(), ContextId { index: 1330 });
    v.insert("floating-point-opt".to_string(), ContextId { index: 1238 });
    v.insert("is-after-type".to_string(), ContextId { index: 1279 });
    v.insert("struct-in".to_string(), ContextId { index: 1323 });
    v.insert("#anon_basic-type_0".to_string(), ContextId { index: 1087 });
    v.insert("number".to_string(), ContextId { index: 1304 });
    v.insert("function-type".to_string(), ContextId { index: 1259 });
    v.insert("value-bracket-after".to_string(), ContextId { index: 1350 });
    v.insert("value".to_string(), ContextId { index: 1345 });
    v.insert("type-specialization".to_string(), ContextId { index: 1338 });
    v.insert("basic-type2-after-brackets".to_string(), ContextId { index: 1190 });
    v.insert("pragma-attribute".to_string(), ContextId { index: 1312 });
    v.insert("#anon_value_1".to_string(), ContextId { index: 1154 });
    v.insert("#anon_main_0".to_string(), ContextId { index: 1118 });
    v.insert("#anon_attribute_0".to_string(), ContextId { index: 1081 });
    v.insert("conditional-declaration-assignment".to_string(), ContextId { index: 1209 });
    v.insert("parameter-attribute-in".to_string(), ContextId { index: 1311 });
    v.insert("new-class".to_string(), ContextId { index: 1299 });
    v.insert("anonymous-enum-body".to_string(), ContextId { index: 1176 });
    v.insert("#anon_invariant-in_0".to_string(), ContextId { index: 1117 });
    v.insert("block-statement-in".to_string(), ContextId { index: 1194 });
    v.insert("#anon_function-definition-after-condition_0".to_string(), ContextId { index: 1109 });
    v.insert("value-list".to_string(), ContextId { index: 1357 });
    v.insert("comment-in".to_string(), ContextId { index: 1205 });
    v.insert("function-type-argument-definition-list".to_string(), ContextId { index: 1262 });
    v.insert("#anon_flow-statement-in_3".to_string(), ContextId { index: 1105 });
    v.insert("attribute-in".to_string(), ContextId { index: 1182 });
    v.insert("#anon_value_4".to_string(), ContextId { index: 1158 });
    v.insert("new-anonymous-after-args".to_string(), ContextId { index: 1298 });
    v.insert("conditional-in".to_string(), ContextId { index: 1211 });
    v.insert("#anon_new-anonymous-after-args_0".to_string(), ContextId { index: 1122 });
    v.insert("condition-after".to_string(), ContextId { index: 1207 });
    v.insert("type".to_string(), ContextId { index: 1335 });
    v.insert("is-after".to_string(), ContextId { index: 1278 });
    v.insert("enum-body".to_string(), ContextId { index: 1225 });
    v.insert("case-after".to_string(), ContextId { index: 1195 });
    v.insert("class-after".to_string(), ContextId { index: 1202 });
    v.insert("#anon_union-name_0".to_string(), ContextId { index: 1149 });
    v.insert("meta-function-parameters".to_string(), ContextId { index: 1287 });
    v.insert("string-in".to_string(), ContextId { index: 1321 });
    v.insert("#anon_foreach-parameter-after-type_0".to_string(), ContextId { index: 1107 });
    v.insert("optional-block-statement-or-label".to_string(), ContextId { index: 1308 });
    v.insert("type-identifier-ref".to_string(), ContextId { index: 1337 });
    v.insert("#anon_for-arguments_0".to_string(), ContextId { index: 1106 });
    v.insert("expect-end-of-line".to_string(), ContextId { index: 1229 });
    v.insert("foreach-arguments-after".to_string(), ContextId { index: 1242 });
    v.insert("new-type-identifier-ref".to_string(), ContextId { index: 1301 });
    v.insert("align-attribute-after".to_string(), ContextId { index: 1175 });
    v.insert("value-template-single".to_string(), ContextId { index: 1362 });
    v.insert("base-class-list".to_string(), ContextId { index: 1186 });
    v.insert("invariant-in".to_string(), ContextId { index: 1277 });
    v.insert("template".to_string(), ContextId { index: 1329 });
    v.insert("value-condition-after".to_string(), ContextId { index: 1352 });
    v.insert("switch-in".to_string(), ContextId { index: 1326 });
    v.insert("function-definition-before-after-arguments".to_string(), ContextId { index: 1254 });
    v.insert("not-whitespace-illegal-pop".to_string(), ContextId { index: 1303 });
    v.insert("#anon_type-specialization_2".to_string(), ContextId { index: 1146 });
    v.insert("#anon_variable-definition-begin_0".to_string(), ContextId { index: 1164 });
    v.insert("alias-in".to_string(), ContextId { index: 1169 });
    v.insert("with-in".to_string(), ContextId { index: 1367 });
    v.insert("#anon_struct-name_0".to_string(), ContextId { index: 1136 });
    v.insert("#anon_value_3".to_string(), ContextId { index: 1157 });
    v.insert("#anon_value_5".to_string(), ContextId { index: 1159 });
    v.insert("#anon_enum-member_0".to_string(), ContextId { index: 1099 });
    v.insert("function-argument-definition-list-content".to_string(), ContextId { index: 1248 });
    v.insert("mixin-in".to_string(), ContextId { index: 1292 });
    v.insert("#anon_value_0".to_string(), ContextId { index: 1153 });
    v.insert("#anon_value_2".to_string(), ContextId { index: 1156 });
    v.insert("switch-after".to_string(), ContextId { index: 1325 });
    v.insert("#anon_module-in_0".to_string(), ContextId { index: 1119 });
    v.insert("#anon_synchronized-in_0".to_string(), ContextId { index: 1139 });
    v.insert("destructor-arguments".to_string(), ContextId { index: 1218 });
    v.insert("#anon_attribute_1".to_string(), ContextId { index: 1082 });
    v.insert("uda-after".to_string(), ContextId { index: 1341 });
    v.insert("first-value".to_string(), ContextId { index: 1232 });
    v.insert("#anon_module-in_1".to_string(), ContextId { index: 1120 });
    v.insert("typeof-value".to_string(), ContextId { index: 1340 });
    v.insert("class-name".to_string(), ContextId { index: 1204 });
    v.insert("variable-definition-after".to_string(), ContextId { index: 1363 });
    v.insert("first-value-call-after".to_string(), ContextId { index: 1235 });
    v.insert("#anon_asm-in_1".to_string(), ContextId { index: 1080 });
    v.insert("function-out-contract-after".to_string(), ContextId { index: 1258 });
    v.insert("#anon_unittest-in_0".to_string(), ContextId { index: 1150 });
    v.insert("#anon_asm-in_0".to_string(), ContextId { index: 1079 });
    v.insert("character-in".to_string(), ContextId { index: 1200 });
    v.insert("tokens-in".to_string(), ContextId { index: 1333 });
    v.insert("#anon_tokens-in_0".to_string(), ContextId { index: 1140 });
    v.insert("function-definition-after-first-argument-list".to_string(), ContextId { index: 1253 });
    v.insert("statement-label-in".to_string(), ContextId { index: 1316 });
    v.insert("#anon_enum-body_0".to_string(), ContextId { index: 1098 });
    v.insert("value-list-after".to_string(), ContextId { index: 1358 });
    v.insert("extern-attribute".to_string(), ContextId { index: 1230 });
    v.insert("throw-in".to_string(), ContextId { index: 1332 });
    v.insert("check-brackets-in".to_string(), ContextId { index: 1201 });
    v.insert("#anon_pragma-attribute_0".to_string(), ContextId { index: 1124 });
    v.insert("meta-function-call".to_string(), ContextId { index: 1286 });
    v.insert("union-name".to_string(), ContextId { index: 1343 });
    v.insert("constructions-in".to_string(), ContextId { index: 1213 });
    v.insert("value-array-list-after-value".to_string(), ContextId { index: 1349 });
    v.insert("variable-definition-begin".to_string(), ContextId { index: 1364 });
    v.insert("enum-after".to_string(), ContextId { index: 1221 });
    v.insert("first-value-bracket-after".to_string(), ContextId { index: 1234 });
    v.insert("parameter-attribute-after".to_string(), ContextId { index: 1310 });
    v.insert("catch-arguments-after".to_string(), ContextId { index: 1198 });
    v.insert("#anon_function-type-argument-definition-list_0".to_string(), ContextId { index: 1112 });
    v.insert("struct-name".to_string(), ContextId { index: 1324 });
    v.insert("main".to_string(), ContextId { index: 1281 });
    v.insert("#anon_first-value_0".to_string(), ContextId { index: 1101 });
    v.insert("basic-type2-after-parens".to_string(), ContextId { index: 1192 });
    v.insert("floating-point".to_string(), ContextId { index: 1237 });
    v.insert("first-value-parens-after".to_string(), ContextId { index: 1236 });
    v.insert("#anon_string-opt_7".to_string(), ContextId { index: 1133 });
    v.insert("function-type-argument-type".to_string(), ContextId { index: 1263 });
    v.insert("import-in".to_string(), ContextId { index: 1268 });
    v.insert("basic-type".to_string(), ContextId { index: 1188 });
    v.insert("function-attribute-in".to_string(), ContextId { index: 1250 });
    v.insert("meta-interface".to_string(), ContextId { index: 1288 });
    v.insert("import-binding-list".to_string(), ContextId { index: 1266 });
    v.insert("#anon_string-opt_0".to_string(), ContextId { index: 1125 });
    v.insert("end-of-line".to_string(), ContextId { index: 1219 });
    v.insert("function-type-argument".to_string(), ContextId { index: 1261 });
    v.insert("type-identifier".to_string(), ContextId { index: 1336 });
    v.insert("static-assert-in".to_string(), ContextId { index: 1318 });
    v.insert("unittest-in".to_string(), ContextId { index: 1344 });
    v.insert("value-array-list".to_string(), ContextId { index: 1347 });
    v.insert("#anon_constructor-argument-list_0".to_string(), ContextId { index: 1094 });
    v.insert("#anon_basic-type2_1".to_string(), ContextId { index: 1086 });
    v.insert("integer".to_string(), ContextId { index: 1271 });
    v.insert("value-or-declaration-in".to_string(), ContextId { index: 1360 });
    v.insert("meta-struct".to_string(), ContextId { index: 1289 });
    v.insert("#anon_comment-in_0".to_string(), ContextId { index: 1093 });
    v.insert("#anon_string-opt_5".to_string(), ContextId { index: 1131 });
    v.insert("#anon_string-opt_9".to_string(), ContextId { index: 1135 });
    v.insert("function-argument-definition-list".to_string(), ContextId { index: 1247 });
    v.insert("import-binding-list-after-assignment".to_string(), ContextId { index: 1267 });
    v.insert("asm-in".to_string(), ContextId { index: 1177 });
    v.insert("basic-type2-after-call".to_string(), ContextId { index: 1191 });
    v.insert("construction".to_string(), ContextId { index: 1212 });
    v.insert("static-foreach-in".to_string(), ContextId { index: 1319 });
    v.insert("value-group-after-lambda".to_string(), ContextId { index: 1354 });
    v.insert("pragma-attribute-after".to_string(), ContextId { index: 1313 });
    v.insert("#anon_version-condition_0".to_string(), ContextId { index: 1165 });
    v.insert("interface-after".to_string(), ContextId { index: 1273 });
    v.insert("value-call-parens-after".to_string(), ContextId { index: 1351 });
    v.insert("number-in".to_string(), ContextId { index: 1305 });
    v.insert("#anon_function-out-contract_1".to_string(), ContextId { index: 1111 });
    v.insert("#anon_destructor-arguments_0".to_string(), ContextId { index: 1096 });
    v.insert("function-type-after".to_string(), ContextId { index: 1260 });
    v.insert("#anon_catch-arguments-after_0".to_string(), ContextId { index: 1091 });
    v.insert("#anon_flow-statement-in_1".to_string(), ContextId { index: 1103 });
    v.insert("#anon_interface-name_0".to_string(), ContextId { index: 1115 });
    v.insert("#anon_tokens-in_1".to_string(), ContextId { index: 1141 });
    v.insert("identifier".to_string(), ContextId { index: 1264 });
    v.insert("#anon_alias-old_0".to_string(), ContextId { index: 1077 });
    v.insert("new-after-parens".to_string(), ContextId { index: 1297 });
    v.insert("#anon_anonymous-enum-body_0".to_string(), ContextId { index: 1078 });
    v.insert("value-array-list-after".to_string(), ContextId { index: 1348 });
    v.insert("#anon_case-after_0".to_string(), ContextId { index: 1089 });
    v.insert("#anon_value_8".to_string(), ContextId { index: 1162 });
    v.insert("attribute-specifier-in".to_string(), ContextId { index: 1185 });
    v.insert("value-parens-after".to_string(), ContextId { index: 1361 });
    v.insert("assert-arguments".to_string(), ContextId { index: 1178 });
    v.insert("#anon_type-specialization_0".to_string(), ContextId { index: 1144 });
    v.insert("alias-old".to_string(), ContextId { index: 1173 });
    v.insert("foreach-parameter-list".to_string(), ContextId { index: 1245 });
    v.insert("mixin-after".to_string(), ContextId { index: 1291 });
    v.insert("enum-member-after".to_string(), ContextId { index: 1228 });
    v.insert("#anon_flow-statement-in_0".to_string(), ContextId { index: 1102 });
    v.insert("enum-assignment".to_string(), ContextId { index: 1223 });
    v.insert("#anon_new-type-identifier_0".to_string(), ContextId { index: 1123 });
    v.insert("at-attribute".to_string(), ContextId { index: 1180 });
    v.insert("#anon_attribute_2".to_string(), ContextId { index: 1083 });
    v.insert("new-after-named".to_string(), ContextId { index: 1296 });
    v.insert("new-type-identifier".to_string(), ContextId { index: 1300 });
    v.insert("function-argument".to_string(), ContextId { index: 1246 });
    v.insert("#anon_string-opt_1".to_string(), ContextId { index: 1126 });
    v.insert("value-identifier".to_string(), ContextId { index: 1356 });
    v.insert("value-maybe-pointer-after".to_string(), ContextId { index: 1359 });
    v.insert("class-in".to_string(), ContextId { index: 1203 });
    v.insert("enum-member".to_string(), ContextId { index: 1227 });
    v.insert("type-storage-modifier-end".to_string(), ContextId { index: 1339 });
    v.insert("end-of-line-in".to_string(), ContextId { index: 1220 });
    v.insert("function-definition-after-condition".to_string(), ContextId { index: 1252 });
    v.insert("#anon_string-opt_4".to_string(), ContextId { index: 1130 });
    v.insert("cast-after".to_string(), ContextId { index: 1196 });
    v
  }
} }