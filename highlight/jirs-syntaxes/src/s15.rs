
#![allow(unused_imports)]
#![allow(dead_code)]

use jirs_syntect::{*, parsing::*};
use lazycell::AtomicLazyCell;

#[inline(always)]
pub fn load() -> SyntaxReference {
        SyntaxReference {  name: "Erlang".to_string(),
  file_extensions: vec!["erl".to_string(),"hrl".to_string(),"Emakefile".to_string(),"emakefile".to_string(),"escript".to_string()],
  scope: Scope { a: 844510829477888, b: 0 },
  first_line_match: Some("(?x:\n  ^ \\#! .* \\b(erlang|escript)\\b |                # shebang\n  ^ \\s* \\%+ \\s* -\\*- .*? \\b[Ee]rlang\\b .*? -\\*-  # editorconfig\n)".to_string()),
  hidden: false,
  variables: {
    let mut v = std::collections::HashMap::new();
    v.insert("variable".to_string(), "[_A-Z]{{ident_char}}*".to_string());
    v.insert("atom_unquoted".to_string(), "[a-z]{{ident_char}}*".to_string());
    v.insert("ident".to_string(), "\\?{,2}(?:{{ident_unquoted}}|{{ident_quoted}})".to_string());
    v.insert("ident_quoted".to_string(), "\\\'((?:\\\\\\\\)*\\\\\\\'|[^\'\'])*\\\'".to_string());
    v.insert("illegal_ident".to_string(), "[^\\s,:.;\'(){}\\[\\]%=|/]+".to_string());
    v.insert("erlang_macros".to_string(), "(?x:\n  MODULE|FUNCTION_NAME|FUNCTION_ARITY|MODULE_STRING|\n  FILE|LINE|MACHINE|OTP_RELEASE\n){{ident_break}}".to_string());
    v.insert("ident_break".to_string(), "(?={{ident_break_char}})".to_string());
    v.insert("erlang_functions".to_string(), "(?x:\n  abs|adler32|adler32_combine|append_element|apply|atom_to_binary|atom_to_list|\n  binary_part|binary_to_atom|binary_to_existing_atom|binary_to_float|\n  binary_to_integer|binary_to_list|binary_to_term|bit_size|bitstring_to_list|\n  bump_reductions|byte_size|cancel_timer|ceil|check_old_code|check_process_code|\n  convert_time_unit|crc32|crc32_combine|date|decode_packet|delete_element|\n  delete_module|demonitor|disconnect_node|display|dist_ctrl_get_data|\n  dist_ctrl_get_data_notification|dist_ctrl_input_handler|dist_ctrl_put_data|\n  element|erase|error|exit|external_size|float|float_to_binary|float_to_list|\n  floor|fun_info|fun_to_list|function_exported|garbage_collect|get|get_cookie|\n  get_keys|get_stacktrace|group_leader|halt|hd|hibernate|insert_element|\n  integer_to_binary|integer_to_list|iolist_size|iolist_to_binary|\n  iolist_to_iovec|is_alive|is_atom|is_binary|is_bitstring|is_boolean|is_builtin|\n  is_float|is_function|is_integer|is_list|is_map|is_map_key|is_number|is_pid|\n  is_port|is_process_alive|is_record|is_reference|is_tuple|length|link|\n  list_to_atom|list_to_binary|list_to_bitstring|list_to_existing_atom|\n  list_to_float|list_to_integer|list_to_pid|list_to_port|list_to_ref|\n  list_to_tuple|load_module|load_nif|loaded|localtime|\n  localtime_to_universaltime|make_ref|make_tuple|map_get|map_size|\n  match_spec_test|max|md5|md5_final|md5_init|md5_update|memory|min|\n  module_loaded|monitor|monitor_node|monotonic_time|nif_error|node|nodes|now|\n  open_port|phash|phash2|pid_to_list|port_call|port_close|port_command|\n  port_connect|port_control|port_info|port_to_list|ports|pre_loaded|\n  process_display|process_flag|process_info|processes|purge_module|put|raise|\n  read_timer|ref_to_list|register|registered|resume_process|round|self|send|\n  send_after|send_nosuspend|set_cookie|setelement|size|spawn|spawn_link|\n  spawn_monitor|spawn_opt|split_binary|start_timer|statistics|suspend_process|\n  system_flag|system_info|system_monitor|system_profile|system_time|\n  term_to_binary|throw|time|time_offset|timestamp|tl|trace|trace_delivered|\n  trace_info|trace_pattern|trunc|tuple_size|tuple_to_list|unique_integer|\n  universaltime|universaltime_to_localtime|unlink|unregister|whereis|yield\n){{ident_break}}".to_string());
    v.insert("support_namespaces".to_string(), "(?x:\n  # builtin namespace\n  erlang|\n\n  # erlang otp libraries\n  # https://github.com/erlang/otp\n  asn1|common_test|compiler|crypto|debugger|dialyzer|diameter|edoc|eldap|\n  erl_(docgen|interface)|et|eunit|ftp|hipe|inets|jinterface|kernel|\n  megaco|mnesia|observer|odbc|os_mon|parsetools|public_key|reltool|\n  runtime_tools|sasl|snmp|ssh|ssl|stdlib|syntax_tools|tftp|tools|wx|xmerl\n){{ident_break}}".to_string());
    v.insert("ident_char".to_string(), "[_A-Za-z\\d@]".to_string());
    v.insert("erlang_types".to_string(), "(?x:\n  # builtin data types\n  # http://erlang.org/doc/reference_manual/typespec.html#the-erlang-type-language\n  any|arity|atom|binary|bitstring|boolean|byte|char|float|fun|function|\n  identifier|integer|iodata|iolist|list|map|maybe_improper_list|mfa|module|nil|\n  no_return|node|none|non_neg_integer|neg_integer|pos_integer|nonempty_list|\n  nonempty_maybe_improper_list|nonempty_improper_list|\n  nonempty_maybe_improper_list|nonempty_string|\n  number|pid|port|record|reference|string|term|timeout|tuple|\n\n  # erlang library\n  # http://erlang.org/doc/man/erlang.html#data-types\n  dist_handle|ext_binary|iovec|message_queue_data|nif_resource|\n  deprecated_time_unit|timeout|timestamp|time_unit\n){{ident_break}}".to_string());
    v.insert("ident_break_char".to_string(), "[^{{ident_char}}]".to_string());
    v.insert("ident_unquoted".to_string(), "[_A-Za-z]{{ident_char}}*".to_string());
    v
  },
  contexts: {
    let mut v = std::collections::HashMap::new();
    v.insert("tuple-of-type-parameters".to_string(), ContextId { index: 1653 });
    v.insert("#anon_preproc-expect-references_0".to_string(), ContextId { index: 1450 });
    v.insert("#anon_type-call-fun-arguments_4".to_string(), ContextId { index: 1508 });
    v.insert("type-parameter-nested".to_string(), ContextId { index: 1666 });
    v.insert("#anon_variable-other-record_0".to_string(), ContextId { index: 1512 });
    v.insert("#anon_preproc-export_2".to_string(), ContextId { index: 1453 });
    v.insert("#anon_preproc-control-definitions_1".to_string(), ContextId { index: 1442 });
    v.insert("list-of-function-parameters".to_string(), ContextId { index: 1576 });
    v.insert("storage-type".to_string(), ContextId { index: 1643 });
    v.insert("atom-quoted-common".to_string(), ContextId { index: 1520 });
    v.insert("#anon_preproc-record_1".to_string(), ContextId { index: 1469 });
    v.insert("#anon_binary-type-parameter_0".to_string(), ContextId { index: 1378 });
    v.insert("function-body".to_string(), ContextId { index: 1552 });
    v.insert("preproc-spec".to_string(), ContextId { index: 1615 });
    v.insert("reference-name".to_string(), ContextId { index: 1635 });
    v.insert("illegal-type-keyword".to_string(), ContextId { index: 1571 });
    v.insert("record-name".to_string(), ContextId { index: 1632 });
    v.insert("statements".to_string(), ContextId { index: 1642 });
    v.insert("#anon_list-of-type-parameters_0".to_string(), ContextId { index: 1421 });
    v.insert("#anon_preproc-spec-return_0".to_string(), ContextId { index: 1475 });
    v.insert("function-call-name".to_string(), ContextId { index: 1555 });
    v.insert("#anon_expr-fun-anonymous_1".to_string(), ContextId { index: 1396 });
    v.insert("binary".to_string(), ContextId { index: 1521 });
    v.insert("namespace-qualifier".to_string(), ContextId { index: 1592 });
    v.insert("variable-parameter".to_string(), ContextId { index: 1676 });
    v.insert("terminator-clause-pop".to_string(), ContextId { index: 1648 });
    v.insert("#anon_escape_0".to_string(), ContextId { index: 1388 });
    v.insert("ident-expect-end".to_string(), ContextId { index: 1567 });
    v.insert("#anon_tuple-of-types_0".to_string(), ContextId { index: 1503 });
    v.insert("binary-function-parameter".to_string(), ContextId { index: 1523 });
    v.insert("preproc-attribute".to_string(), ContextId { index: 1599 });
    v.insert("#anon_record-fields_1".to_string(), ContextId { index: 1492 });
    v.insert("value-end-pop".to_string(), ContextId { index: 1667 });
    v.insert("#anon_preproc-export_1".to_string(), ContextId { index: 1452 });
    v.insert("#anon_variable-function_0".to_string(), ContextId { index: 1510 });
    v.insert("list-of-type-parameters".to_string(), ContextId { index: 1577 });
    v.insert("variable-other".to_string(), ContextId { index: 1672 });
    v.insert("#anon_record-fields_0".to_string(), ContextId { index: 1491 });
    v.insert("record-fields-common".to_string(), ContextId { index: 1631 });
    v.insert("#anon_preproc-define_1".to_string(), ContextId { index: 1448 });
    v.insert("arguments-end".to_string(), ContextId { index: 1516 });
    v.insert("record".to_string(), ContextId { index: 1628 });
    v.insert("preproc-spec-name".to_string(), ContextId { index: 1617 });
    v.insert("tuple-of-types".to_string(), ContextId { index: 1654 });
    v.insert("#anon_map-of-types_0".to_string(), ContextId { index: 1427 });
    v.insert("entity-name-record".to_string(), ContextId { index: 1536 });
    v.insert("preproc-control-definitions".to_string(), ContextId { index: 1602 });
    v.insert("preproc-control-expressions".to_string(), ContextId { index: 1603 });
    v.insert("separator-sequence".to_string(), ContextId { index: 1639 });
    v.insert("string-body".to_string(), ContextId { index: 1645 });
    v.insert("#anon_map-of-expressions_0".to_string(), ContextId { index: 1424 });
    v.insert("record-fields".to_string(), ContextId { index: 1630 });
    v.insert("macro-pop".to_string(), ContextId { index: 1580 });
    v.insert("separator-clauses".to_string(), ContextId { index: 1637 });
    v.insert("#anon_group-of-types_0".to_string(), ContextId { index: 1412 });
    v.insert("function-call".to_string(), ContextId { index: 1553 });
    v.insert("tuple-common".to_string(), ContextId { index: 1650 });
    v.insert("#anon_preproc-undef_2".to_string(), ContextId { index: 1483 });
    v.insert("preproc-expect-end".to_string(), ContextId { index: 1608 });
    v.insert("#anon_entity-name-module_0".to_string(), ContextId { index: 1385 });
    v.insert("#anon_preproc-spec_0".to_string(), ContextId { index: 1476 });
    v.insert("namespace-pop".to_string(), ContextId { index: 1591 });
    v.insert("#anon_preproc-attribute_3".to_string(), ContextId { index: 1437 });
    v.insert("operator".to_string(), ContextId { index: 1594 });
    v.insert("terminator-clause".to_string(), ContextId { index: 1647 });
    v.insert("#anon_constant-other-macro_0".to_string(), ContextId { index: 1382 });
    v.insert("expr-fun".to_string(), ContextId { index: 1546 });
    v.insert("#anon_preproc-attribute_6".to_string(), ContextId { index: 1440 });
    v.insert("#anon_type-call-fun-arguments_3".to_string(), ContextId { index: 1507 });
    v.insert("#anon_main_0".to_string(), ContextId { index: 1423 });
    v.insert("type-call-fun-arguments".to_string(), ContextId { index: 1656 });
    v.insert("#anon_preproc-record_0".to_string(), ContextId { index: 1468 });
    v.insert("#anon_group-of-function-parameters_0".to_string(), ContextId { index: 1410 });
    v.insert("#anon_preproc-module_0".to_string(), ContextId { index: 1464 });
    v.insert("separator-union".to_string(), ContextId { index: 1641 });
    v.insert("record-body".to_string(), ContextId { index: 1629 });
    v.insert("preproc-stray-arguments-end".to_string(), ContextId { index: 1621 });
    v.insert("variable-other-pop".to_string(), ContextId { index: 1674 });
    v.insert("namespace-accessor".to_string(), ContextId { index: 1587 });
    v.insert("#anon_illegal-group_2".to_string(), ContextId { index: 1418 });
    v.insert("#anon_list-of-function-parameters_0".to_string(), ContextId { index: 1420 });
    v.insert("type-call".to_string(), ContextId { index: 1655 });
    v.insert("#anon_map-of-expressions_1".to_string(), ContextId { index: 1425 });
    v.insert("#anon_preproc-define-arguments-parameters_0".to_string(), ContextId { index: 1445 });
    v.insert("preproc-control".to_string(), ContextId { index: 1601 });
    v.insert("binary-type-parameter".to_string(), ContextId { index: 1524 });
    v.insert("entity-name-function".to_string(), ContextId { index: 1533 });
    v.insert("string".to_string(), ContextId { index: 1644 });
    v.insert("#anon_illegal-group-body_2".to_string(), ContextId { index: 1415 });
    v.insert("namespace".to_string(), ContextId { index: 1586 });
    v.insert("preproc-expect-references".to_string(), ContextId { index: 1609 });
    v.insert("tuple-of-expressions".to_string(), ContextId { index: 1651 });
    v.insert("#anon_map-of-types_2".to_string(), ContextId { index: 1429 });
    v.insert("#anon_record-body_3".to_string(), ContextId { index: 1488 });
    v.insert("type-parameter".to_string(), ContextId { index: 1665 });
    v.insert("common".to_string(), ContextId { index: 1529 });
    v.insert("#anon_tuple-of-function-parameters_0".to_string(), ContextId { index: 1501 });
    v.insert("constant-other-macro".to_string(), ContextId { index: 1531 });
    v.insert("#anon_entity-name-macro_0".to_string(), ContextId { index: 1384 });
    v.insert("#anon_expr-control_2".to_string(), ContextId { index: 1391 });
    v.insert("#anon_map-of-types_1".to_string(), ContextId { index: 1428 });
    v.insert("#anon_entity-name-type_0".to_string(), ContextId { index: 1387 });
    v.insert("#anon_preproc-include_0".to_string(), ContextId { index: 1459 });
    v.insert("expr-control".to_string(), ContextId { index: 1542 });
    v.insert("#anon_record-fields_4".to_string(), ContextId { index: 1495 });
    v.insert("separator-expressions".to_string(), ContextId { index: 1638 });
    v.insert("variable-anonymous-pop".to_string(), ContextId { index: 1669 });
    v.insert("#anon_comment_0".to_string(), ContextId { index: 1381 });
    v.insert("expr-try".to_string(), ContextId { index: 1548 });
    v.insert("#anon_preproc-record_2".to_string(), ContextId { index: 1470 });
    v.insert("function-parameter".to_string(), ContextId { index: 1559 });
    v.insert("group-of-function-parameters".to_string(), ContextId { index: 1564 });
    v.insert("variable-function".to_string(), ContextId { index: 1671 });
    v.insert("#anon_illegal-group_0".to_string(), ContextId { index: 1416 });
    v.insert("constant".to_string(), ContextId { index: 1530 });
    v.insert("comment".to_string(), ContextId { index: 1528 });
    v.insert("#anon_storage-type_0".to_string(), ContextId { index: 1499 });
    v.insert("preproc-type-body".to_string(), ContextId { index: 1623 });
    v.insert("#anon_expr-try_1".to_string(), ContextId { index: 1403 });
    v.insert("separator-type".to_string(), ContextId { index: 1640 });
    v.insert("#anon_preproc-attribute_4".to_string(), ContextId { index: 1438 });
    v.insert("function-parameters".to_string(), ContextId { index: 1561 });
    v.insert("type-call-name".to_string(), ContextId { index: 1657 });
    v.insert("preproc-define-arguments-parameters".to_string(), ContextId { index: 1607 });
    v.insert("function-call-arguments".to_string(), ContextId { index: 1554 });
    v.insert("#anon_illegal-group-body_0".to_string(), ContextId { index: 1413 });
    v.insert("#anon_preproc-include_4".to_string(), ContextId { index: 1463 });
    v.insert("namespace-member-other".to_string(), ContextId { index: 1589 });
    v.insert("#anon_group-of-expressions_0".to_string(), ContextId { index: 1409 });
    v.insert("#anon_record-body_2".to_string(), ContextId { index: 1487 });
    v.insert("escape".to_string(), ContextId { index: 1539 });
    v.insert("preproc-undef".to_string(), ContextId { index: 1626 });
    v.insert("#anon_preproc-module_3".to_string(), ContextId { index: 1467 });
    v.insert("map-of-types".to_string(), ContextId { index: 1584 });
    v.insert("#anon_preproc-attribute_5".to_string(), ContextId { index: 1439 });
    v.insert("binary-common".to_string(), ContextId { index: 1522 });
    v.insert("eol-pop".to_string(), ContextId { index: 1538 });
    v.insert("list-of-expressions".to_string(), ContextId { index: 1575 });
    v.insert("map-of-expressions".to_string(), ContextId { index: 1583 });
    v.insert("operator-unary".to_string(), ContextId { index: 1596 });
    v.insert("string-maybe-env".to_string(), ContextId { index: 1646 });
    v.insert("#anon_reference-arity_1".to_string(), ContextId { index: 1497 });
    v.insert("#anon_preproc-type_1".to_string(), ContextId { index: 1480 });
    v.insert("number".to_string(), ContextId { index: 1593 });
    v.insert("preproc-import".to_string(), ContextId { index: 1611 });
    v.insert("#anon_preproc-define-arguments-parameters_1".to_string(), ContextId { index: 1446 });
    v.insert("#anon_character_0".to_string(), ContextId { index: 1380 });
    v.insert("expressions".to_string(), ContextId { index: 1549 });
    v.insert("clause-end-pop".to_string(), ContextId { index: 1527 });
    v.insert("#anon_preproc-import_0".to_string(), ContextId { index: 1455 });
    v.insert("#anon_expr-control_0".to_string(), ContextId { index: 1389 });
    v.insert("__start".to_string(), ContextId { index: 1514 });
    v.insert("character".to_string(), ContextId { index: 1525 });
    v.insert("expr-control-flow-end".to_string(), ContextId { index: 1545 });
    v.insert("illegal-stray".to_string(), ContextId { index: 1570 });
    v.insert("#anon_preproc-import_1".to_string(), ContextId { index: 1456 });
    v.insert("#anon_tuple-of-expressions_0".to_string(), ContextId { index: 1500 });
    v.insert("preproc-attribute-argument".to_string(), ContextId { index: 1600 });
    v.insert("preproc-export".to_string(), ContextId { index: 1610 });
    v.insert("type-call-other-arguments".to_string(), ContextId { index: 1658 });
    v.insert("#anon_map-of-expressions_2".to_string(), ContextId { index: 1426 });
    v.insert("#anon_preproc-control-definitions_0".to_string(), ContextId { index: 1441 });
    v.insert("#anon_preproc-undef_3".to_string(), ContextId { index: 1484 });
    v.insert("#anon_preproc-export_0".to_string(), ContextId { index: 1451 });
    v.insert("list-common".to_string(), ContextId { index: 1574 });
    v.insert("#anon_expr-fun-anonymous_0".to_string(), ContextId { index: 1395 });
    v.insert("list-of-types".to_string(), ContextId { index: 1578 });
    v.insert("atom-expect-end".to_string(), ContextId { index: 1518 });
    v.insert("else-pop".to_string(), ContextId { index: 1532 });
    v.insert("#anon_preproc-attribute_0".to_string(), ContextId { index: 1434 });
    v.insert("expect-arguments-separator".to_string(), ContextId { index: 1541 });
    v.insert("atom-pop".to_string(), ContextId { index: 1519 });
    v.insert("preproc-include".to_string(), ContextId { index: 1612 });
    v.insert("function-call-path".to_string(), ContextId { index: 1556 });
    v.insert("preproc-define-arguments-body".to_string(), ContextId { index: 1606 });
    v.insert("variable-other-field".to_string(), ContextId { index: 1673 });
    v.insert("#anon_preproc-attribute_2".to_string(), ContextId { index: 1436 });
    v.insert("#anon_record-fields-common_1".to_string(), ContextId { index: 1490 });
    v.insert("#anon_expr-control_5".to_string(), ContextId { index: 1394 });
    v.insert("#anon_preproc-module_1".to_string(), ContextId { index: 1465 });
    v.insert("group-of-type-parameters".to_string(), ContextId { index: 1565 });
    v.insert("group-of-types".to_string(), ContextId { index: 1566 });
    v.insert("main".to_string(), ContextId { index: 1581 });
    v.insert("namespace-member".to_string(), ContextId { index: 1588 });
    v.insert("#anon_preproc-type-parameters_0".to_string(), ContextId { index: 1478 });
    v.insert("variable-anonymous".to_string(), ContextId { index: 1668 });
    v.insert("#anon_illegal-group_1".to_string(), ContextId { index: 1417 });
    v.insert("#anon_group-of-type-parameters_0".to_string(), ContextId { index: 1411 });
    v.insert("entity-name-type".to_string(), ContextId { index: 1537 });
    v.insert("#anon_binary_0".to_string(), ContextId { index: 1379 });
    v.insert("#anon_type-call-fun-arguments_2".to_string(), ContextId { index: 1506 });
    v.insert("#anon_preproc-spec-parameters_0".to_string(), ContextId { index: 1474 });
    v.insert("immediatelly-pop".to_string(), ContextId { index: 1572 });
    v.insert("#anon_variable-other-field_0".to_string(), ContextId { index: 1511 });
    v.insert("namespace-meta".to_string(), ContextId { index: 1590 });
    v.insert("preproc-type".to_string(), ContextId { index: 1622 });
    v.insert("#anon_function-parameters_1".to_string(), ContextId { index: 1408 });
    v.insert("#anon_record-fields-common_0".to_string(), ContextId { index: 1489 });
    v.insert("#anon_tuple-of-type-parameters_0".to_string(), ContextId { index: 1502 });
    v.insert("#anon_namespace-qualifier_0".to_string(), ContextId { index: 1430 });
    v.insert("#anon_preproc-attribute-argument_1".to_string(), ContextId { index: 1432 });
    v.insert("#anon_preproc-spec-guards_1".to_string(), ContextId { index: 1473 });
    v.insert("preproc-spec-parameters".to_string(), ContextId { index: 1618 });
    v.insert("terms".to_string(), ContextId { index: 1649 });
    v.insert("expr-fun-anonymous".to_string(), ContextId { index: 1547 });
    v.insert("function-parameter-nested".to_string(), ContextId { index: 1560 });
    v.insert("map-separator".to_string(), ContextId { index: 1585 });
    v.insert("group-common".to_string(), ContextId { index: 1562 });
    v.insert("reference".to_string(), ContextId { index: 1633 });
    v.insert("#anon_record-fields_3".to_string(), ContextId { index: 1494 });
    v.insert("#anon_entity-name-record_0".to_string(), ContextId { index: 1386 });
    v.insert("reference-pop".to_string(), ContextId { index: 1636 });
    v.insert("variable-any".to_string(), ContextId { index: 1670 });
    v.insert("entity-name-module".to_string(), ContextId { index: 1535 });
    v.insert("illegal-group-body".to_string(), ContextId { index: 1569 });
    v.insert("#anon_preproc-define_2".to_string(), ContextId { index: 1449 });
    v.insert("arguments-common".to_string(), ContextId { index: 1515 });
    v.insert("keyword".to_string(), ContextId { index: 1573 });
    v.insert("#anon_statements_0".to_string(), ContextId { index: 1498 });
    v.insert("#anon_type-call-fun-arguments_1".to_string(), ContextId { index: 1505 });
    v.insert("expr-control-body".to_string(), ContextId { index: 1543 });
    v.insert("#anon_atom_0".to_string(), ContextId { index: 1375 });
    v.insert("preproc-record".to_string(), ContextId { index: 1614 });
    v.insert("type-namespace".to_string(), ContextId { index: 1663 });
    v.insert("__main".to_string(), ContextId { index: 1513 });
    v.insert("#anon_entity-name-function_0".to_string(), ContextId { index: 1383 });
    v.insert("#anon_binary-common_0".to_string(), ContextId { index: 1376 });
    v.insert("preproc-spec-return".to_string(), ContextId { index: 1620 });
    v.insert("reference-arity".to_string(), ContextId { index: 1634 });
    v.insert("#anon_list-of-expressions_0".to_string(), ContextId { index: 1419 });
    v.insert("#anon_preproc-attribute-argument_2".to_string(), ContextId { index: 1433 });
    v.insert("preproc-type-name".to_string(), ContextId { index: 1624 });
    v.insert("function-meta".to_string(), ContextId { index: 1558 });
    v.insert("tuple-of-function-parameters".to_string(), ContextId { index: 1652 });
    v.insert("variable-other-record".to_string(), ContextId { index: 1675 });
    v.insert("#anon_expr-fun-anonymous_4".to_string(), ContextId { index: 1399 });
    v.insert("#anon_preproc-include_3".to_string(), ContextId { index: 1462 });
    v.insert("#anon_expr-try_2".to_string(), ContextId { index: 1404 });
    v.insert("clause-end-or-stray".to_string(), ContextId { index: 1526 });
    v.insert("#anon_expr-control_1".to_string(), ContextId { index: 1390 });
    v.insert("#anon_preproc-undef_0".to_string(), ContextId { index: 1481 });
    v.insert("#anon_preproc-include_2".to_string(), ContextId { index: 1461 });
    v.insert("#anon_function-call-arguments_0".to_string(), ContextId { index: 1406 });
    v.insert("function-call-pop".to_string(), ContextId { index: 1557 });
    v.insert("#anon_expr-try_3".to_string(), ContextId { index: 1405 });
    v.insert("illegal-group".to_string(), ContextId { index: 1568 });
    v.insert("#anon_expr-control_4".to_string(), ContextId { index: 1393 });
    v.insert("preproc-control-meta".to_string(), ContextId { index: 1604 });
    v.insert("#anon_preproc-export_3".to_string(), ContextId { index: 1454 });
    v.insert("preproc-define".to_string(), ContextId { index: 1605 });
    v.insert("#anon_preproc-type_0".to_string(), ContextId { index: 1479 });
    v.insert("#anon_expr-fun_0".to_string(), ContextId { index: 1400 });
    v.insert("parameters-end-pop".to_string(), ContextId { index: 1598 });
    v.insert("#anon_preproc-import_2".to_string(), ContextId { index: 1457 });
    v.insert("type-namespace-member".to_string(), ContextId { index: 1664 });
    v.insert("expr-control-conditional-end".to_string(), ContextId { index: 1544 });
    v.insert("function".to_string(), ContextId { index: 1551 });
    v.insert("#anon_preproc-module_2".to_string(), ContextId { index: 1466 });
    v.insert("preproc-spec-path".to_string(), ContextId { index: 1619 });
    v.insert("#anon_type-call-fun-arguments_0".to_string(), ContextId { index: 1504 });
    v.insert("preproc-module".to_string(), ContextId { index: 1613 });
    v.insert("#anon_preproc-control-expressions_1".to_string(), ContextId { index: 1444 });
    v.insert("#anon_preproc-control-expressions_0".to_string(), ContextId { index: 1443 });
    v.insert("#anon_atom-pop_0".to_string(), ContextId { index: 1374 });
    v.insert("type-call-path".to_string(), ContextId { index: 1659 });
    v.insert("#anon_expr-control_3".to_string(), ContextId { index: 1392 });
    v.insert("expect-arguments-end".to_string(), ContextId { index: 1540 });
    v.insert("preproc-spec-guards".to_string(), ContextId { index: 1616 });
    v.insert("#anon_preproc-import_3".to_string(), ContextId { index: 1458 });
    v.insert("#anon_expr-fun_1".to_string(), ContextId { index: 1401 });
    v.insert("#anon_record-fields_2".to_string(), ContextId { index: 1493 });
    v.insert("map-common".to_string(), ContextId { index: 1582 });
    v.insert("type-common".to_string(), ContextId { index: 1661 });
    v.insert("#anon_record-body_1".to_string(), ContextId { index: 1486 });
    v.insert("#anon_preproc-undef_1".to_string(), ContextId { index: 1482 });
    v.insert("#anon_expr-fun-anonymous_3".to_string(), ContextId { index: 1398 });
    v.insert("atom".to_string(), ContextId { index: 1517 });
    v.insert("parameters-common".to_string(), ContextId { index: 1597 });
    v.insert("#anon_preproc-attribute_1".to_string(), ContextId { index: 1435 });
    v.insert("preproc-type-parameters".to_string(), ContextId { index: 1625 });
    v.insert("#anon_binary-function-parameter_0".to_string(), ContextId { index: 1377 });
    v.insert("#anon_expr-try_0".to_string(), ContextId { index: 1402 });
    v.insert("#anon_preproc-include_1".to_string(), ContextId { index: 1460 });
    v.insert("type-call-pop".to_string(), ContextId { index: 1660 });
    v.insert("#anon_preproc-record_3".to_string(), ContextId { index: 1471 });
    v.insert("entity-name-macro".to_string(), ContextId { index: 1534 });
    v.insert("#anon_function-parameters_0".to_string(), ContextId { index: 1407 });
    v.insert("#anon_reference-arity_0".to_string(), ContextId { index: 1496 });
    v.insert("#anon_preproc-type-body_0".to_string(), ContextId { index: 1477 });
    v.insert("#anon_illegal-group-body_1".to_string(), ContextId { index: 1414 });
    v.insert("#anon_expr-fun-anonymous_2".to_string(), ContextId { index: 1397 });
    v.insert("#anon_preproc-define_0".to_string(), ContextId { index: 1447 });
    v.insert("prototype".to_string(), ContextId { index: 1627 });
    v.insert("group-of-expressions".to_string(), ContextId { index: 1563 });
    v.insert("operator-comprehension".to_string(), ContextId { index: 1595 });
    v.insert("type-expressions".to_string(), ContextId { index: 1662 });
    v.insert("#anon_preproc-attribute-argument_0".to_string(), ContextId { index: 1431 });
    v.insert("macro".to_string(), ContextId { index: 1579 });
    v.insert("#anon_type-call-other-arguments_0".to_string(), ContextId { index: 1509 });
    v.insert("expressions-nested".to_string(), ContextId { index: 1550 });
    v.insert("#anon_list-of-types_0".to_string(), ContextId { index: 1422 });
    v.insert("#anon_record-body_0".to_string(), ContextId { index: 1485 });
    v.insert("#anon_preproc-spec-guards_0".to_string(), ContextId { index: 1472 });
    v
  }
} }