
#![allow(unused_imports)]
#![allow(dead_code)]

use jirs_syntect::{*, parsing::*};
use lazycell::AtomicLazyCell;

#[inline(always)]
pub fn load() -> SyntaxReference {
        SyntaxReference {  name: "C#".to_string(),
  file_extensions: vec!["cs".to_string(),"csx".to_string()],
  scope: Scope { a: 844472174772224, b: 0 },
  first_line_match: None,
  hidden: false,
  variables: {
    let mut v = std::collections::HashMap::new();
    v.insert("dec_exponent".to_string(), "(?:[eE][-+]??{{dec_digits}})".to_string());
    v.insert("bin_op".to_string(), "(?:\\+|->|-|\\*|/|%|\\|\\||&&|\\||&|\\^|<<|>>|=>|<=|<|>=|>|==|!=|\\?\\?)".to_string());
    v.insert("name".to_string(), "(?:@{{reserved}}|@{{base_type}}|@var|@?{{name_normal}})".to_string());
    v.insert("brackets_capture".to_string(), "((\\[)(,*)(\\]))".to_string());
    v.insert("type_suffix_capture".to_string(), "(\\?)?{{brackets_capture}}?(?:\\s*(\\*))?".to_string());
    v.insert("visibility".to_string(), "\\b(?:public|private|protected|internal|protected\\s+internal)\\b".to_string());
    v.insert("cap_name".to_string(), "(\\p{Lu}{{other_char}})".to_string());
    v.insert("escaped_char".to_string(), "(?:\\\\[abfnrtv\"\'\\\\]|{{unicode_char}}|\\\\x[0-9a-fA-F]{1,4}|\\\\[0-9]{1,3})".to_string());
    v.insert("float_suffix".to_string(), "[fFdDmM]".to_string());
    v.insert("namespaced_name".to_string(), "(?:(?:{{name}}{{generic_declaration}}\\s*\\.\\s*)*{{name}}{{generic_declaration}})".to_string());
    v.insert("name_normal".to_string(), "{{start_char}}{{other_char}}*\\b".to_string());
    v.insert("base_type".to_string(), "(?:(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|short|ushort|object|string|void)\\b)".to_string());
    v.insert("dec_digits".to_string(), "(?:[\\d_]*\\d)".to_string());
    v.insert("other_char".to_string(), "(?:{{unicode_char}}|[_0-9\\p{L}])".to_string());
    v.insert("integer_suffix".to_string(), "[uU][lL]?|[lL][uU]?".to_string());
    v.insert("reserved".to_string(), "(?:abstract|as|base|break|case|catch|checked|class|const|continue|default|delegate|do|else|enum|event|explicit|extern|finally|fixed|for|foreach|goto|if|implicit|in|interface|internal|is|lock|nameof|namespace|new|null|operator|out|override|params|private|protected|public|readonly|ref|return|sealed|sizeof|stackalloc|static|string|struct|switch|this|throw|try|typeof|unchecked|unsafe|using|virtual|volatile|while)".to_string());
    v.insert("unicode_char".to_string(), "(?:\\\\u\\h{4}|\\\\U\\h{8})".to_string());
    v.insert("unary_op".to_string(), "(?:\\+\\+|--|-|~|!|&|\\*)".to_string());
    v.insert("generic_declaration".to_string(), "\\s*(<[^(={};<]*>)?\\s*".to_string());
    v.insert("start_char".to_string(), "(?:{{unicode_char}}|[_\\p{L}])".to_string());
    v.insert("type_suffix".to_string(), "(?:\\s*(?:\\[,*\\]|\\*|\\?)*)".to_string());
    v
  },
  contexts: {
    let mut v = std::collections::HashMap::new();
    v.insert("#anon_long_format_string_0".to_string(), ContextId { index: 279 });
    v.insert("#anon_keywords_0".to_string(), ContextId { index: 257 });
    v.insert("data_type_body".to_string(), ContextId { index: 346 });
    v.insert("delegate_type".to_string(), ContextId { index: 352 });
    v.insert("#anon_namespace_declaration_1".to_string(), ContextId { index: 301 });
    v.insert("escaped".to_string(), ContextId { index: 356 });
    v.insert("long_string_placeholder_format".to_string(), ContextId { index: 382 });
    v.insert("try_block".to_string(), ContextId { index: 412 });
    v.insert("trycatch_block".to_string(), ContextId { index: 413 });
    v.insert("type".to_string(), ContextId { index: 414 });
    v.insert("event_handler_declaration".to_string(), ContextId { index: 357 });
    v.insert("method_accessor".to_string(), ContextId { index: 386 });
    v.insert("attribute".to_string(), ContextId { index: 330 });
    v.insert("for_block".to_string(), ContextId { index: 360 });
    v.insert("method_body_transition".to_string(), ContextId { index: 388 });
    v.insert("method_name".to_string(), ContextId { index: 390 });
    v.insert("#anon_method_name_3".to_string(), ContextId { index: 298 });
    v.insert("#anon_var_declaration_0".to_string(), ContextId { index: 317 });
    v.insert("#anon_var_declaration_explicit_0".to_string(), ContextId { index: 318 });
    v.insert("#anon_event_handler_declaration_0".to_string(), ContextId { index: 246 });
    v.insert("constructor_initializer_after".to_string(), ContextId { index: 344 });
    v.insert("__start".to_string(), ContextId { index: 327 });
    v.insert("expression_block".to_string(), ContextId { index: 358 });
    v.insert("#anon_long_string_placeholder_format_0".to_string(), ContextId { index: 280 });
    v.insert("#anon_class_declaration_0".to_string(), ContextId { index: 231 });
    v.insert("method_body".to_string(), ContextId { index: 387 });
    v.insert("string_placeholder".to_string(), ContextId { index: 404 });
    v.insert("constructor_arguments".to_string(), ContextId { index: 342 });
    v.insert("maybe_an_anonymous_class".to_string(), ContextId { index: 384 });
    v.insert("struct_body".to_string(), ContextId { index: 408 });
    v.insert("#anon_method_accessor_1".to_string(), ContextId { index: 288 });
    v.insert("#anon_catch_when_1".to_string(), ContextId { index: 230 });
    v.insert("#anon_class_declaration_3".to_string(), ContextId { index: 234 });
    v.insert("#anon_for_block_1".to_string(), ContextId { index: 251 });
    v.insert("#anon_keywords_3".to_string(), ContextId { index: 260 });
    v.insert("#anon_lambdas_1".to_string(), ContextId { index: 265 });
    v.insert("#anon_else_block_1".to_string(), ContextId { index: 244 });
    v.insert("#anon_line_of_code_in_no_semicolon_1".to_string(), ContextId { index: 272 });
    v.insert("#anon_member_variables_declaration_0".to_string(), ContextId { index: 286 });
    v.insert("#anon_string_placeholder_format_0".to_string(), ContextId { index: 307 });
    v.insert("#anon_for_block_2".to_string(), ContextId { index: 252 });
    v.insert("#anon_switch_block_1".to_string(), ContextId { index: 309 });
    v.insert("#anon_format_string_0".to_string(), ContextId { index: 253 });
    v.insert("#anon_if_block_1".to_string(), ContextId { index: 255 });
    v.insert("#anon_method_body_1".to_string(), ContextId { index: 292 });
    v.insert("catch_expr".to_string(), ContextId { index: 334 });
    v.insert("class_signature".to_string(), ContextId { index: 338 });
    v.insert("#anon_method_name_1".to_string(), ContextId { index: 296 });
    v.insert("initializer_constructor".to_string(), ContextId { index: 367 });
    v.insert("line_of_code_in".to_string(), ContextId { index: 375 });
    v.insert("#anon_method_accessor_2".to_string(), ContextId { index: 289 });
    v.insert("catch_when".to_string(), ContextId { index: 335 });
    v.insert("interface_body".to_string(), ContextId { index: 369 });
    v.insert("line_of_code_in_no_semicolon".to_string(), ContextId { index: 376 });
    v.insert("long_string".to_string(), ContextId { index: 379 });
    v.insert("long_string_placeholder".to_string(), ContextId { index: 381 });
    v.insert("string".to_string(), ContextId { index: 401 });
    v.insert("string_placeholder_escape".to_string(), ContextId { index: 405 });
    v.insert("#anon_maybe_an_anonymous_class_1".to_string(), ContextId { index: 284 });
    v.insert("#anon_method_accessor_0".to_string(), ContextId { index: 287 });
    v.insert("method_params_bracket".to_string(), ContextId { index: 394 });
    v.insert("#anon_delegate_name_1".to_string(), ContextId { index: 241 });
    v.insert("#anon_main_0".to_string(), ContextId { index: 281 });
    v.insert("#anon_using_block_1".to_string(), ContextId { index: 316 });
    v.insert("delegate_params".to_string(), ContextId { index: 351 });
    v.insert("string_interpolation".to_string(), ContextId { index: 403 });
    v.insert("delegate_declaration".to_string(), ContextId { index: 348 });
    v.insert("accessor_arguments".to_string(), ContextId { index: 328 });
    v.insert("method_param".to_string(), ContextId { index: 391 });
    v.insert("switch_condition".to_string(), ContextId { index: 411 });
    v.insert("#anon_main_1".to_string(), ContextId { index: 282 });
    v.insert("#anon_preprocessor_option_1".to_string(), ContextId { index: 304 });
    v.insert("#anon_while_block_0".to_string(), ContextId { index: 323 });
    v.insert("attribute_in".to_string(), ContextId { index: 332 });
    v.insert("#anon_keywords_6".to_string(), ContextId { index: 263 });
    v.insert("#anon_for_block_0".to_string(), ContextId { index: 250 });
    v.insert("#anon_trycatch_block_0".to_string(), ContextId { index: 313 });
    v.insert("#anon_else_block_2".to_string(), ContextId { index: 245 });
    v.insert("#anon_preprocessor_option_0".to_string(), ContextId { index: 303 });
    v.insert("method_params".to_string(), ContextId { index: 393 });
    v.insert("string_placeholders".to_string(), ContextId { index: 407 });
    v.insert("keywords".to_string(), ContextId { index: 372 });
    v.insert("type_tuple".to_string(), ContextId { index: 422 });
    v.insert("#anon_try_block_1".to_string(), ContextId { index: 312 });
    v.insert("#anon_variables_declaration_0".to_string(), ContextId { index: 321 });
    v.insert("#anon_lambdas_0".to_string(), ContextId { index: 264 });
    v.insert("#anon_line_of_code_2".to_string(), ContextId { index: 269 });
    v.insert("#anon_variables_declaration_1".to_string(), ContextId { index: 322 });
    v.insert("data_type_signature".to_string(), ContextId { index: 347 });
    v.insert("member_variables_declaration".to_string(), ContextId { index: 385 });
    v.insert("struct_signature".to_string(), ContextId { index: 409 });
    v.insert("comments_in".to_string(), ContextId { index: 341 });
    v.insert("#anon_maybe_an_anonymous_class_0".to_string(), ContextId { index: 283 });
    v.insert("#anon_line_of_code_in_no_semicolon_3".to_string(), ContextId { index: 274 });
    v.insert("type_arg_param_common".to_string(), ContextId { index: 415 });
    v.insert("#anon_maybe_an_anonymous_class_2".to_string(), ContextId { index: 285 });
    v.insert("type_constraint_common".to_string(), ContextId { index: 419 });
    v.insert("#anon_expression_block_1".to_string(), ContextId { index: 249 });
    v.insert("#anon_if_condition_0".to_string(), ContextId { index: 256 });
    v.insert("constructor_prebody".to_string(), ContextId { index: 345 });
    v.insert("#anon_namespace_declaration_2".to_string(), ContextId { index: 302 });
    v.insert("var_declaration".to_string(), ContextId { index: 427 });
    v.insert("type_constraint".to_string(), ContextId { index: 418 });
    v.insert("#anon_else_block_0".to_string(), ContextId { index: 243 });
    v.insert("else_block".to_string(), ContextId { index: 355 });
    v.insert("#anon_arguments_1".to_string(), ContextId { index: 228 });
    v.insert("catch_block".to_string(), ContextId { index: 333 });
    v.insert("inside_string_placeholder".to_string(), ContextId { index: 368 });
    v.insert("for_var_assignment".to_string(), ContextId { index: 361 });
    v.insert("preprocessor_option".to_string(), ContextId { index: 398 });
    v.insert("long_string_escaped".to_string(), ContextId { index: 380 });
    v.insert("type_common".to_string(), ContextId { index: 417 });
    v.insert("comments".to_string(), ContextId { index: 340 });
    v.insert("#anon_type_tuple_0".to_string(), ContextId { index: 314 });
    v.insert("delegate_end".to_string(), ContextId { index: 349 });
    v.insert("#anon_expression_block_0".to_string(), ContextId { index: 248 });
    v.insert("switch_block".to_string(), ContextId { index: 410 });
    v.insert("class_declaration".to_string(), ContextId { index: 337 });
    v.insert("#anon_using_block_0".to_string(), ContextId { index: 315 });
    v.insert("arguments".to_string(), ContextId { index: 329 });
    v.insert("#anon_line_of_code_in_no_semicolon_0".to_string(), ContextId { index: 271 });
    v.insert("#anon_method_name_0".to_string(), ContextId { index: 295 });
    v.insert("#anon_data_type_signature_0".to_string(), ContextId { index: 239 });
    v.insert("stray_close_bracket".to_string(), ContextId { index: 400 });
    v.insert("#anon_lambdas_2".to_string(), ContextId { index: 266 });
    v.insert("main".to_string(), ContextId { index: 383 });
    v.insert("method_declaration".to_string(), ContextId { index: 389 });
    v.insert("#anon_arguments_0".to_string(), ContextId { index: 227 });
    v.insert("#anon_comments_1".to_string(), ContextId { index: 236 });
    v.insert("#anon_keywords_4".to_string(), ContextId { index: 261 });
    v.insert("#anon_method_declaration_0".to_string(), ContextId { index: 294 });
    v.insert("lambdas".to_string(), ContextId { index: 373 });
    v.insert("string_escaped".to_string(), ContextId { index: 402 });
    v.insert("#anon_switch_condition_0".to_string(), ContextId { index: 310 });
    v.insert("#anon_preprocessor_option_3".to_string(), ContextId { index: 306 });
    v.insert("if_block".to_string(), ContextId { index: 365 });
    v.insert("long_format_string".to_string(), ContextId { index: 378 });
    v.insert("literals".to_string(), ContextId { index: 377 });
    v.insert("#anon_line_of_code_1".to_string(), ContextId { index: 268 });
    v.insert("constructor_initializer".to_string(), ContextId { index: 343 });
    v.insert("#anon_line_of_code_in_no_semicolon_4".to_string(), ContextId { index: 275 });
    v.insert("option_done".to_string(), ContextId { index: 397 });
    v.insert("#anon_line_of_code_in_no_semicolon_5".to_string(), ContextId { index: 276 });
    v.insert("#anon_var_declaration_explicit_2".to_string(), ContextId { index: 320 });
    v.insert("while_condition".to_string(), ContextId { index: 431 });
    v.insert("#anon_line_of_code_0".to_string(), ContextId { index: 267 });
    v.insert("#anon_try_block_0".to_string(), ContextId { index: 311 });
    v.insert("namespace_alias".to_string(), ContextId { index: 395 });
    v.insert("#anon_delegate_name_0".to_string(), ContextId { index: 240 });
    v.insert("#anon_class_declaration_2".to_string(), ContextId { index: 233 });
    v.insert("prototype".to_string(), ContextId { index: 399 });
    v.insert("#anon_method_name_2".to_string(), ContextId { index: 297 });
    v.insert("type_no_space".to_string(), ContextId { index: 420 });
    v.insert("#anon_catch_when_0".to_string(), ContextId { index: 229 });
    v.insert("function_call_arguments".to_string(), ContextId { index: 364 });
    v.insert("interface_declaration".to_string(), ContextId { index: 370 });
    v.insert("using".to_string(), ContextId { index: 423 });
    v.insert("using_namespace".to_string(), ContextId { index: 425 });
    v.insert("format_string".to_string(), ContextId { index: 363 });
    v.insert("#anon_keywords_2".to_string(), ContextId { index: 259 });
    v.insert("interface_signature".to_string(), ContextId { index: 371 });
    v.insert("while_block".to_string(), ContextId { index: 430 });
    v.insert("#anon_method_accessor_3".to_string(), ContextId { index: 290 });
    v.insert("#anon_if_block_0".to_string(), ContextId { index: 254 });
    v.insert("code_block_in".to_string(), ContextId { index: 339 });
    v.insert("namespace_declaration".to_string(), ContextId { index: 396 });
    v.insert("#anon_line_of_code_in_no_semicolon_2".to_string(), ContextId { index: 273 });
    v.insert("type_argument".to_string(), ContextId { index: 416 });
    v.insert("variables_declaration".to_string(), ContextId { index: 429 });
    v.insert("__main".to_string(), ContextId { index: 326 });
    v.insert("string_placeholder_format".to_string(), ContextId { index: 406 });
    v.insert("do_condition".to_string(), ContextId { index: 353 });
    v.insert("#anon_while_condition_0".to_string(), ContextId { index: 325 });
    v.insert("line_of_code".to_string(), ContextId { index: 374 });
    v.insert("#anon_method_body_2".to_string(), ContextId { index: 293 });
    v.insert("method_param_type".to_string(), ContextId { index: 392 });
    v.insert("#anon_constructor_prebody_0".to_string(), ContextId { index: 237 });
    v.insert("type_parameter".to_string(), ContextId { index: 421 });
    v.insert("#anon_line_of_code_in_no_semicolon_6".to_string(), ContextId { index: 277 });
    v.insert("using_block".to_string(), ContextId { index: 424 });
    v.insert("#anon_line_of_code_in_no_semicolon_7".to_string(), ContextId { index: 278 });
    v.insert("#anon_keywords_5".to_string(), ContextId { index: 262 });
    v.insert("#anon_method_param_type_0".to_string(), ContextId { index: 299 });
    v.insert("#anon_namespace_declaration_0".to_string(), ContextId { index: 300 });
    v.insert("#anon_class_declaration_1".to_string(), ContextId { index: 232 });
    v.insert("class_body".to_string(), ContextId { index: 336 });
    v.insert("attribute_arguments".to_string(), ContextId { index: 331 });
    v.insert("#anon_line_of_code_3".to_string(), ContextId { index: 270 });
    v.insert("if_condition".to_string(), ContextId { index: 366 });
    v.insert("finally_block".to_string(), ContextId { index: 359 });
    v.insert("documentation".to_string(), ContextId { index: 354 });
    v.insert("#anon_var_declaration_explicit_1".to_string(), ContextId { index: 319 });
    v.insert("foreach_var_assignment".to_string(), ContextId { index: 362 });
    v.insert("using_var_assignment".to_string(), ContextId { index: 426 });
    v.insert("#anon_comments_0".to_string(), ContextId { index: 235 });
    v.insert("#anon_keywords_1".to_string(), ContextId { index: 258 });
    v.insert("var_declaration_explicit".to_string(), ContextId { index: 428 });
    v.insert("#anon_switch_block_0".to_string(), ContextId { index: 308 });
    v.insert("#anon_method_body_0".to_string(), ContextId { index: 291 });
    v.insert("#anon_preprocessor_option_2".to_string(), ContextId { index: 305 });
    v.insert("#anon_event_handler_declaration_1".to_string(), ContextId { index: 247 });
    v.insert("#anon_while_block_1".to_string(), ContextId { index: 324 });
    v.insert("#anon_documentation_0".to_string(), ContextId { index: 242 });
    v.insert("delegate_name".to_string(), ContextId { index: 350 });
    v.insert("#anon_data_type_body_0".to_string(), ContextId { index: 238 });
    v
  }
} }