
#![allow(unused_imports)]
#![allow(dead_code)]

use jirs_syntect::{*, parsing::*};
use lazycell::AtomicLazyCell;

#[inline(always)]
pub fn load() -> SyntaxReference {
        SyntaxReference {  name: "Scala".to_string(),
  file_extensions: vec!["scala".to_string(),"sbt".to_string(),"sc".to_string()],
  scope: Scope { a: 844738462744576, b: 0 },
  first_line_match: None,
  hidden: false,
  variables: {
    let mut v = std::collections::HashMap::new();
    v.insert("operator_character".to_string(), "[\\p{Sm}\\p{So}[{{disallowed_as_operator}}&&[\\x{20}-\\x{7E}]]]".to_string());
    v.insert("boundvarid".to_string(), "(?:`{{varid}}`|{{varid}})".to_string());
    v.insert("rightarrow".to_string(), "=>|\\x{21D2}".to_string());
    v.insert("typeplainid".to_string(), "(?:{{upper}}{{idrest}}|{{varid}}|{{typeop}})".to_string());
    v.insert("xml_qualified_name".to_string(), "(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)".to_string());
    v.insert("keywords".to_string(), "\\b(?:abstract|case|catch|class|def|do|else|extends|false|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|super|this|throw|trait|true|try|type|val|var|while|with|yield)\\b".to_string());
    v.insert("typeprefix".to_string(), "(:)\\s*".to_string());
    v.insert("unicode_char".to_string(), "\\\\u[0-9a-fA-F]{4}".to_string());
    v.insert("varid".to_string(), "(?:(?:\\p{Ll}|_+(?={{idcont}})){{idrest}})".to_string());
    v.insert("idorunder".to_string(), "(?:{{id}}|_)".to_string());
    v.insert("plainid".to_string(), "(?:{{alphaplainid}}|{{op}})".to_string());
    v.insert("escaped_char".to_string(), "\\\\[btnfr\"\'\\\\]|{{unicode_char}}|{{octal_char}}".to_string());
    v.insert("disallowed_as_operator".to_string(), "[^\\w\\[\\]\\(\\)\\{\\}\'\";,.`_\\s]".to_string());
    v.insert("octal_char".to_string(), "\\\\[0-7]{1,3}".to_string());
    v.insert("idcont".to_string(), "[$\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lo}\\p{Nl}0-9]".to_string());
    v.insert("alphaplainid".to_string(), "(?:{{upper}}{{idrest}}|{{varid}})".to_string());
    v.insert("op".to_string(), "(?x:\n  [[^:=<@\\x{2190}\\x{21D2}#]&&{{operator_character}}]{{operator_character}}*|\n  =[[^>]&&{{operator_character}}]{{operator_character}}*|\n  =>{{operator_character}}+|\n  <(?!{{operator_character}}|[[:alpha:]])|\n  <[[^\\-]&&{{operator_character}}]+|\n  <-{{operator_character}}+|\n  [:@\\x{2190}\\x{21D2}#]{{operator_character}}+\n)".to_string());
    v.insert("typeop".to_string(), "(?x:\n  [[^:=<@\\x{2190}\\x{21D2}#]&&{{operator_character}}]{{operator_character}}*|\n  =[[^>]&&{{operator_character}}]{{operator_character}}*|\n  =>{{operator_character}}+|\n  <(?!{{operator_character}}|[[:alpha:]])|\n  <[[^\\-%:]&&{{operator_character}}]+|\n  <[:%\\-]{{operator_character}}+|\n  :[[^<]&&{{operator_character}}]+|\n  :<{{operator_character}}+|\n  [@\\x{2190}\\x{21D2}#]{{operator_character}}+\n)".to_string());
    v.insert("idrest".to_string(), "(?:(?:{{idcont}}|_(?=[^{{operator_character}}]))*(?:_{{operator_character}}+)?)".to_string());
    v.insert("upperid".to_string(), "(?:(\\b\\p{Lu}|\\$){{idrest}})".to_string());
    v.insert("withinparens".to_string(), "(?:\\((?:[^\\(\\)]|\\((?:[^\\(\\)]|\\([^\\(\\)]*\\))*\\))*\\))".to_string());
    v.insert("id".to_string(), "(?:{{plainid}}|`[^`\\n]+`)".to_string());
    v.insert("typeid".to_string(), "(?:{{typeplainid}}|`[^`\\n]+`)".to_string());
    v.insert("upper".to_string(), "[$\\p{Lu}]".to_string());
    v.insert("xml_name".to_string(), "[[:alpha:]:_][[:alnum:]:_.-]*".to_string());
    v.insert("withinbrackets".to_string(), "(?:\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])*\\])".to_string());
    v.insert("alphaid".to_string(), "(?:{{upper}}{{idrest}}|{{varid}})".to_string());
    v.insert("nonopchar".to_string(), "[[[:alpha:]]0-9\\s\\(\\)\\[\\]\\{\\}\']".to_string());
    v
  },
  contexts: {
    let mut v = std::collections::HashMap::new();
    v.insert("#anon_val-pattern-match-inner_0".to_string(), ContextId { index: 5189 });
    v.insert("val-bailout".to_string(), ContextId { index: 5292 });
    v.insert("val-pattern-match-inner".to_string(), ContextId { index: 5294 });
    v.insert("constants".to_string(), ContextId { index: 5236 });
    v.insert("#anon_block-comments_0".to_string(), ContextId { index: 5118 });
    v.insert("initialization".to_string(), ContextId { index: 5254 });
    v.insert("initialization-body".to_string(), ContextId { index: 5256 });
    v.insert("val-simple-ascription".to_string(), ContextId { index: 5297 });
    v.insert("#anon_nest-curly-and-self_0".to_string(), ContextId { index: 5167 });
    v.insert("#anon_single-type-expression-no-function_0".to_string(), ContextId { index: 5172 });
    v.insert("#anon_class-inheritance-extends-token-after_0".to_string(), ContextId { index: 5129 });
    v.insert("base-constants".to_string(), ContextId { index: 5206 });
    v.insert("#anon_xml-comments_0".to_string(), ContextId { index: 5197 });
    v.insert("lambda-declaration-parens".to_string(), ContextId { index: 5264 });
    v.insert("#anon_annotation-parameters_0".to_string(), ContextId { index: 5107 });
    v.insert("xml-literal".to_string(), ContextId { index: 5303 });
    v.insert("#anon_declarations_3".to_string(), ContextId { index: 5141 });
    v.insert("#anon_braces_1".to_string(), ContextId { index: 5121 });
    v.insert("#anon_case-pattern_1".to_string(), ContextId { index: 5126 });
    v.insert("braces".to_string(), ContextId { index: 5212 });
    v.insert("xml-attribute-val".to_string(), ContextId { index: 5300 });
    v.insert("strings".to_string(), ContextId { index: 5289 });
    v.insert("#anon_braces_0".to_string(), ContextId { index: 5120 });
    v.insert("#anon_declarations_1".to_string(), ContextId { index: 5139 });
    v.insert("#anon_single-type-expression-tail_1".to_string(), ContextId { index: 5177 });
    v.insert("val-pattern-match".to_string(), ContextId { index: 5293 });
    v.insert("#anon_initialization-body-base_1".to_string(), ContextId { index: 5155 });
    v.insert("single-type-expression-leading-newline".to_string(), ContextId { index: 5280 });
    v.insert("xml-comments".to_string(), ContextId { index: 5301 });
    v.insert("#anon_lambda-declaration-base_0".to_string(), ContextId { index: 5163 });
    v.insert("initialization-term-tail".to_string(), ContextId { index: 5259 });
    v.insert("base-pattern-match".to_string(), ContextId { index: 5207 });
    v.insert("function-parameter-list-newline".to_string(), ContextId { index: 5247 });
    v.insert("#anon_initialization-block_0".to_string(), ContextId { index: 5153 });
    v.insert("#anon_pattern-match_0".to_string(), ContextId { index: 5170 });
    v.insert("#anon_single-type-expression-leading-newline_0".to_string(), ContextId { index: 5171 });
    v.insert("#anon_case-body-first_0".to_string(), ContextId { index: 5123 });
    v.insert("#anon_declarations_6".to_string(), ContextId { index: 5144 });
    v.insert("#anon_try-dispatch_1".to_string(), ContextId { index: 5188 });
    v.insert("#anon_base-pattern-match_2".to_string(), ContextId { index: 5114 });
    v.insert("#anon_braces_2".to_string(), ContextId { index: 5122 });
    v.insert("#anon_class-inheritance-extends-token_1".to_string(), ContextId { index: 5132 });
    v.insert("base-type-expression".to_string(), ContextId { index: 5208 });
    v.insert("block-comments".to_string(), ContextId { index: 5211 });
    v.insert("#anon_class-inheritance-early-initializer_0".to_string(), ContextId { index: 5128 });
    v.insert("class-inheritance-extends-token-newline".to_string(), ContextId { index: 5225 });
    v.insert("annotation-parameters".to_string(), ContextId { index: 5203 });
    v.insert("#anon_strings_4".to_string(), ContextId { index: 5184 });
    v.insert("class-pre-inheritance-early-initializer".to_string(), ContextId { index: 5230 });
    v.insert("class-type-parameter-list-newline".to_string(), ContextId { index: 5234 });
    v.insert("late-keywords".to_string(), ContextId { index: 5266 });
    v.insert("case-body-first".to_string(), ContextId { index: 5214 });
    v.insert("late-operators".to_string(), ContextId { index: 5267 });
    v.insert("#anon_case-body-non-first_0".to_string(), ContextId { index: 5124 });
    v.insert("ascription-no-function".to_string(), ContextId { index: 5205 });
    v.insert("main-no-lambdas".to_string(), ContextId { index: 5270 });
    v.insert("class-pre-inheritance-early-initializer-newline".to_string(), ContextId { index: 5231 });
    v.insert("val-simple-body".to_string(), ContextId { index: 5298 });
    v.insert("single-type-expression-tail-no-function-newline".to_string(), ContextId { index: 5285 });
    v.insert("#anon_single-type-expression-tail-no-function_1".to_string(), ContextId { index: 5174 });
    v.insert("#anon_interpolated-vars-expressions_0".to_string(), ContextId { index: 5160 });
    v.insert("#anon_base-type-expression-no-function_0".to_string(), ContextId { index: 5115 });
    v.insert("annotation".to_string(), ContextId { index: 5202 });
    v.insert("val-simple-body-tail".to_string(), ContextId { index: 5299 });
    v.insert("#anon_block-comments_1".to_string(), ContextId { index: 5119 });
    v.insert("xml-mode".to_string(), ContextId { index: 5304 });
    v.insert("comments".to_string(), ContextId { index: 5235 });
    v.insert("main".to_string(), ContextId { index: 5269 });
    v.insert("#anon_base-pattern-match_1".to_string(), ContextId { index: 5113 });
    v.insert("function-type-parameter-list-newline".to_string(), ContextId { index: 5252 });
    v.insert("for-parens-body".to_string(), ContextId { index: 5244 });
    v.insert("#anon_xml-attribute-val_2".to_string(), ContextId { index: 5196 });
    v.insert("class-inheritance-early-initializer-newline".to_string(), ContextId { index: 5219 });
    v.insert("#anon_case-pattern_0".to_string(), ContextId { index: 5125 });
    v.insert("#anon_declarations_2".to_string(), ContextId { index: 5140 });
    v.insert("#anon_ascription-no-function_0".to_string(), ContextId { index: 5111 });
    v.insert("#anon_for-braces-body_0".to_string(), ContextId { index: 5145 });
    v.insert("#anon_imports_1".to_string(), ContextId { index: 5152 });
    v.insert("#anon_initialization-body-base_0".to_string(), ContextId { index: 5154 });
    v.insert("#anon_lambdas_0".to_string(), ContextId { index: 5166 });
    v.insert("#anon_initialization-term-tail_0".to_string(), ContextId { index: 5156 });
    v.insert("class-inheritance-extends-token".to_string(), ContextId { index: 5222 });
    v.insert("for-braces-body".to_string(), ContextId { index: 5242 });
    v.insert("function-return-type-definition".to_string(), ContextId { index: 5248 });
    v.insert("single-type-expression-no-function".to_string(), ContextId { index: 5281 });
    v.insert("lambda-declaration".to_string(), ContextId { index: 5262 });
    v.insert("xml-entity".to_string(), ContextId { index: 5302 });
    v.insert("xml-should-be-entity".to_string(), ContextId { index: 5305 });
    v.insert("#anon_single-type-expression-tail-no-function_2".to_string(), ContextId { index: 5175 });
    v.insert("lambdas".to_string(), ContextId { index: 5265 });
    v.insert("#anon_xml-literal_0".to_string(), ContextId { index: 5198 });
    v.insert("#anon_xml-mode_0".to_string(), ContextId { index: 5199 });
    v.insert("#anon_single-type-expression_0".to_string(), ContextId { index: 5179 });
    v.insert("prototype".to_string(), ContextId { index: 5277 });
    v.insert("#anon_interpolated-vars-expressions_1".to_string(), ContextId { index: 5161 });
    v.insert("#anon_val-simple-body_0".to_string(), ContextId { index: 5193 });
    v.insert("#anon_nested-pattern-match_1".to_string(), ContextId { index: 5169 });
    v.insert("#anon_single-type-expression-tail_2".to_string(), ContextId { index: 5178 });
    v.insert("#anon_initialization-term-tail_2".to_string(), ContextId { index: 5158 });
    v.insert("operators".to_string(), ContextId { index: 5275 });
    v.insert("scala-symbol".to_string(), ContextId { index: 5278 });
    v.insert("#anon_declarations_5".to_string(), ContextId { index: 5143 });
    v.insert("#anon_class-parameter-list_0".to_string(), ContextId { index: 5133 });
    v.insert("xml-tag-decl".to_string(), ContextId { index: 5306 });
    v.insert("initialization-body-base".to_string(), ContextId { index: 5258 });
    v.insert("initialization-body-allow-newline".to_string(), ContextId { index: 5257 });
    v.insert("#anon_base-type-expression-no-function_1".to_string(), ContextId { index: 5116 });
    v.insert("#anon_strings_2".to_string(), ContextId { index: 5182 });
    v.insert("#anon_function-parameter-list_2".to_string(), ContextId { index: 5150 });
    v.insert("class-inheritance-extends-token-after".to_string(), ContextId { index: 5223 });
    v.insert("imports".to_string(), ContextId { index: 5253 });
    v.insert("#anon_function-parameter-list_0".to_string(), ContextId { index: 5148 });
    v.insert("#anon_try-dispatch_0".to_string(), ContextId { index: 5187 });
    v.insert("f_string".to_string(), ContextId { index: 5241 });
    v.insert("#anon_imports_0".to_string(), ContextId { index: 5151 });
    v.insert("base-types".to_string(), ContextId { index: 5210 });
    v.insert("function-type-parameter-list".to_string(), ContextId { index: 5251 });
    v.insert("function-parameter-list".to_string(), ContextId { index: 5246 });
    v.insert("single-type-expression-tail-no-function-type-expectation".to_string(), ContextId { index: 5286 });
    v.insert("storage-modifiers".to_string(), ContextId { index: 5288 });
    v.insert("#anon_initialization-term-tail_3".to_string(), ContextId { index: 5159 });
    v.insert("#anon_base-pattern-match_0".to_string(), ContextId { index: 5112 });
    v.insert("#anon_xml-attribute-val_1".to_string(), ContextId { index: 5195 });
    v.insert("case-body".to_string(), ContextId { index: 5213 });
    v.insert("#anon_class-parameter-list_1".to_string(), ContextId { index: 5134 });
    v.insert("#anon_strings_5".to_string(), ContextId { index: 5185 });
    v.insert("char-literal".to_string(), ContextId { index: 5217 });
    v.insert("declarations".to_string(), ContextId { index: 5238 });
    v.insert("keywords".to_string(), ContextId { index: 5261 });
    v.insert("nested-pattern-match".to_string(), ContextId { index: 5274 });
    v.insert("#anon_single-type-expression-tail-no-function_0".to_string(), ContextId { index: 5173 });
    v.insert("type-constraints".to_string(), ContextId { index: 5291 });
    v.insert("#anon_class-parameter-list_2".to_string(), ContextId { index: 5135 });
    v.insert("#anon_strings_0".to_string(), ContextId { index: 5180 });
    v.insert("initialization-block".to_string(), ContextId { index: 5255 });
    v.insert("#anon_annotation-parameters_1".to_string(), ContextId { index: 5108 });
    v.insert("#anon_val-pattern-match-main_1".to_string(), ContextId { index: 5191 });
    v.insert("val-pattern-match-inner-paren".to_string(), ContextId { index: 5295 });
    v.insert("#anon_function-parameter-list_1".to_string(), ContextId { index: 5149 });
    v.insert("interpolated-vars-expressions".to_string(), ContextId { index: 5260 });
    v.insert("#anon_annotation_0".to_string(), ContextId { index: 5110 });
    v.insert("try-dispatch".to_string(), ContextId { index: 5290 });
    v.insert("#anon_class-type-parameter-list_0".to_string(), ContextId { index: 5137 });
    v.insert("delimited-type-expression".to_string(), ContextId { index: 5239 });
    v.insert("#anon_lambda-declaration_0".to_string(), ContextId { index: 5165 });
    v.insert("#anon_declarations_4".to_string(), ContextId { index: 5142 });
    v.insert("#anon_class-inheritance-extends-token_0".to_string(), ContextId { index: 5131 });
    v.insert("class-inheritance-with".to_string(), ContextId { index: 5226 });
    v.insert("literal-constants".to_string(), ContextId { index: 5268 });
    v.insert("pattern-match".to_string(), ContextId { index: 5276 });
    v.insert("class-inheritance-extends-newline".to_string(), ContextId { index: 5221 });
    v.insert("#anon_class-pre-inheritance-early-initializer_0".to_string(), ContextId { index: 5136 });
    v.insert("single-type-expression-tail".to_string(), ContextId { index: 5282 });
    v.insert("#anon_class-inheritance-extends-token-after_1".to_string(), ContextId { index: 5130 });
    v.insert("lambda-declaration-base".to_string(), ContextId { index: 5263 });
    v.insert("nest-curly-and-self".to_string(), ContextId { index: 5273 });
    v.insert("#anon_base-type-expression-no-function_2".to_string(), ContextId { index: 5117 });
    v.insert("#anon_nested-pattern-match_0".to_string(), ContextId { index: 5168 });
    v.insert("#anon_single-type-expression-tail_0".to_string(), ContextId { index: 5176 });
    v.insert("#anon_strings_1".to_string(), ContextId { index: 5181 });
    v.insert("#anon_case-pattern_2".to_string(), ContextId { index: 5127 });
    v.insert("__main".to_string(), ContextId { index: 5200 });
    v.insert("class-inheritance-with-newline".to_string(), ContextId { index: 5227 });
    v.insert("class-inheritance-early-initializer".to_string(), ContextId { index: 5218 });
    v.insert("case-pattern".to_string(), ContextId { index: 5216 });
    v.insert("class-tparams-brackets".to_string(), ContextId { index: 5232 });
    v.insert("for-parens-expr".to_string(), ContextId { index: 5245 });
    v.insert("#anon_val-pattern-match-main_0".to_string(), ContextId { index: 5190 });
    v.insert("__start".to_string(), ContextId { index: 5201 });
    v.insert("class-inheritance-extends".to_string(), ContextId { index: 5220 });
    v.insert("function-tparams-brackets".to_string(), ContextId { index: 5250 });
    v.insert("#anon_strings_6".to_string(), ContextId { index: 5186 });
    v.insert("#anon_val-pattern-match-main_2".to_string(), ContextId { index: 5192 });
    v.insert("ascription".to_string(), ContextId { index: 5204 });
    v.insert("base-type-expression-no-function".to_string(), ContextId { index: 5209 });
    v.insert("main-post-lambdas".to_string(), ContextId { index: 5271 });
    v.insert("main-pre-lambdas".to_string(), ContextId { index: 5272 });
    v.insert("single-type-expression-tail-no-function".to_string(), ContextId { index: 5284 });
    v.insert("val-pattern-match-main".to_string(), ContextId { index: 5296 });
    v.insert("class-parameter-list-newline".to_string(), ContextId { index: 5229 });
    v.insert("#anon_interpolated-vars-expressions_2".to_string(), ContextId { index: 5162 });
    v.insert("class-inheritance-extends-token-after-newline".to_string(), ContextId { index: 5224 });
    v.insert("#anon_strings_3".to_string(), ContextId { index: 5183 });
    v.insert("#anon_initialization-term-tail_1".to_string(), ContextId { index: 5157 });
    v.insert("#anon_xml-attribute-val_0".to_string(), ContextId { index: 5194 });
    v.insert("class-type-parameter-list".to_string(), ContextId { index: 5233 });
    v.insert("decl-newline-double-check".to_string(), ContextId { index: 5237 });
    v.insert("escaped".to_string(), ContextId { index: 5240 });
    v.insert("case-body-non-first".to_string(), ContextId { index: 5215 });
    v.insert("function-return-type-definition-newline".to_string(), ContextId { index: 5249 });
    v.insert("single-type-expression".to_string(), ContextId { index: 5279 });
    v.insert("#anon_for-comprehension_1".to_string(), ContextId { index: 5147 });
    v.insert("#anon_annotation-parameters_2".to_string(), ContextId { index: 5109 });
    v.insert("#anon_for-comprehension_0".to_string(), ContextId { index: 5146 });
    v.insert("class-parameter-list".to_string(), ContextId { index: 5228 });
    v.insert("#anon_declarations_0".to_string(), ContextId { index: 5138 });
    v.insert("single-type-expression-tail-newline".to_string(), ContextId { index: 5283 });
    v.insert("single-type-expression-tail-type-expectation".to_string(), ContextId { index: 5287 });
    v.insert("for-comprehension".to_string(), ContextId { index: 5243 });
    v.insert("#anon_lambda-declaration-parens_0".to_string(), ContextId { index: 5164 });
    v
  }
} }