
#![allow(unused_imports)]
#![allow(dead_code)]

use jirs_syntect::{*, parsing::*};
use lazycell::AtomicLazyCell;

#[inline(always)]
pub fn load() -> SyntaxReference {
        SyntaxReference {  name: "C++".to_string(),
  file_extensions: vec!["cpp".to_string(),"cc".to_string(),"cp".to_string(),"cxx".to_string(),"c++".to_string(),"C".to_string(),"h".to_string(),"hh".to_string(),"hpp".to_string(),"hxx".to_string(),"h++".to_string(),"inl".to_string(),"ipp".to_string()],
  scope: Scope { a: 844476469739520, b: 0 },
  first_line_match: Some("-\\*- C\\+\\+ -\\*-".to_string()),
  hidden: false,
  variables: {
    let mut v = std::collections::HashMap::new();
    v.insert("casts".to_string(), "const_cast|dynamic_cast|reinterpret_cast|static_cast".to_string());
    v.insert("before_tag".to_string(), "struct|union|enum\\s+class|enum\\s+struct|enum|class".to_string());
    v.insert("data_structures_forward_decl_lookahead".to_string(), "(\\s+{{macro_identifier}})*\\s*(:\\s*({{path_lookahead}}|{{visibility_modifiers}}|,|\\s|<[^;]*>)+)?;".to_string());
    v.insert("generic_open".to_string(), "(?:{{regular_plus}}(?:<".to_string());
    v.insert("operator_keywords".to_string(), "and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq|noexcept".to_string());
    v.insert("paren_open".to_string(), "(?:\\(".to_string());
    v.insert("modifiers".to_string(), "{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}".to_string());
    v.insert("type_qualifier".to_string(), "const|constexpr|mutable|typename|volatile".to_string());
    v.insert("operator_method_name".to_string(), "\\boperator\\s*(?:[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\\|\\||\\+\\+|--|,|->\\*?|\\(\\)|\\[\\]|\"\"\\s*{{identifier}})".to_string());
    v.insert("dec_exponent".to_string(), "(?:[eE][-+]??{{dec_digits}})".to_string());
    v.insert("regular".to_string(), "[^(){}&;*^%=<>-]*".to_string());
    v.insert("balance_parentheses".to_string(), "{{regular}}{{paren_open}}{{regular}}{{paren_close}}{{regular}}".to_string());
    v.insert("paren_close".to_string(), "\\))?".to_string());
    v.insert("regular_plus".to_string(), "[^(){}&;*^%=<>-]+".to_string());
    v.insert("integer_suffix".to_string(), "[lL]{1,2}[uU]?|[uU][lL]{0,2}".to_string());
    v.insert("identifier".to_string(), "\\b[[:alpha:]_][[:alnum:]_]*\\b".to_string());
    v.insert("non_func_keywords".to_string(), "if|for|switch|while|decltype|sizeof|__declspec|__attribute__|typeid|alignof|alignas|static_assert".to_string());
    v.insert("generic_lookahead".to_string(), "<{{generic_open}}{{generic_open}}{{regular}}{{generic_close}}\\s*{{generic_close}}{{balance_parentheses}}>".to_string());
    v.insert("hex_exponent".to_string(), "(?:[pP][-+]??{{dec_digits}})".to_string());
    v.insert("visibility_modifiers".to_string(), "private|protected|public".to_string());
    v.insert("storage_classes".to_string(), "static|export|extern|friend|explicit|virtual|register|thread_local".to_string());
    v.insert("hex_suffix".to_string(), "(?:[g-zG-Z_][[:alnum:]_]*|(?=[^[:alnum:]_\']))".to_string());
    v.insert("declspec".to_string(), "__declspec\\(\\s*\\w+(?:\\([^)]+\\))?\\s*\\)".to_string());
    v.insert("macro_identifier".to_string(), "\\b[[:upper:]_][[:upper:][:digit:]_]{2,}\\b".to_string());
    v.insert("other_keywords".to_string(), "typedef|nullptr|{{visibility_modifiers}}|static_assert|sizeof|using|typeid|alignof|alignas|namespace|template".to_string());
    v.insert("memory_operators".to_string(), "new|delete".to_string());
    v.insert("compiler_directive".to_string(), "inline|restrict|__restrict__|__restrict".to_string());
    v.insert("generic_close".to_string(), ">)?)?".to_string());
    v.insert("non_angle_brackets".to_string(), "(?=<<|<=)".to_string());
    v.insert("dec_suffix".to_string(), "(?:[a-zA-Z_][[:alnum:]_]*|(?=[^[:alnum:]_\']))".to_string());
    v.insert("dec_digits".to_string(), "(?:\\d(?:[\\d\']*\\d)?)".to_string());
    v.insert("path_lookahead".to_string(), "(?:::\\s*)?(?:{{identifier}}\\s*::\\s*)*(?:template\\s+)?{{identifier}}".to_string());
    v.insert("float_suffix".to_string(), "[fF]".to_string());
    v.insert("basic_types".to_string(), "asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void".to_string());
    v.insert("control_keywords".to_string(), "break|case|catch|continue|default|do|else|for|goto|if|_Pragma|return|switch|throw|try|while".to_string());
    v
  },
  contexts: {
    let mut v = std::collections::HashMap::new();
    v.insert("#anon_block_0".to_string(), ContextId { index: 433 });
    v.insert("data-structures-maybe-method".to_string(), ContextId { index: 571 });
    v.insert("preprocessor-block-finish-if-branch-statements".to_string(), ContextId { index: 628 });
    v.insert("preprocessor-other".to_string(), ContextId { index: 646 });
    v.insert("preprocessor-rule-disabled-global".to_string(), ContextId { index: 649 });
    v.insert("#anon_preprocessor-rule-other-global_0".to_string(), ContextId { index: 544 });
    v.insert("#anon_data-structures-struct-definition-after-identifier_0".to_string(), ContextId { index: 450 });
    v.insert("#anon_namespace_1".to_string(), ContextId { index: 507 });
    v.insert("#anon_generic-type_4".to_string(), ContextId { index: 467 });
    v.insert("decimal-suffix".to_string(), ContextId { index: 579 });
    v.insert("#anon_method-definition-params_1".to_string(), ContextId { index: 500 });
    v.insert("#anon_preprocessor-rule-enabled-global_0".to_string(), ContextId { index: 538 });
    v.insert("modifiers-parens".to_string(), ContextId { index: 620 });
    v.insert("#anon_data-structures-body_0".to_string(), ContextId { index: 436 });
    v.insert("keywords".to_string(), ContextId { index: 605 });
    v.insert("early-expressions-before-generic-type".to_string(), ContextId { index: 582 });
    v.insert("preprocessor-convention-ignore-uppercase-ident-lines".to_string(), ContextId { index: 632 });
    v.insert("#anon_data-structures-modifier_0".to_string(), ContextId { index: 446 });
    v.insert("#anon_data-structures-definition-common-end_0".to_string(), ContextId { index: 439 });
    v.insert("preprocessor-block-finish-statements".to_string(), ContextId { index: 629 });
    v.insert("preprocessor-expressions".to_string(), ContextId { index: 636 });
    v.insert("method-definition-body".to_string(), ContextId { index: 615 });
    v.insert("preprocessor-block-if-branch-global".to_string(), ContextId { index: 630 });
    v.insert("#anon_data-structures-definition-common-end_1".to_string(), ContextId { index: 440 });
    v.insert("#anon_global-modifier_0".to_string(), ContextId { index: 473 });
    v.insert("#anon_members-after-accessor-junction_3".to_string(), ContextId { index: 491 });
    v.insert("data-structures".to_string(), ContextId { index: 561 });
    v.insert("#anon_global_3".to_string(), ContextId { index: 482 });
    v.insert("#anon_preprocessor-other_1".to_string(), ContextId { index: 522 });
    v.insert("expressions".to_string(), ContextId { index: 583 });
    v.insert("preprocessor-if-branch-function-call-arguments-finish".to_string(), ContextId { index: 640 });
    v.insert("numbers".to_string(), ContextId { index: 623 });
    v.insert("keywords-angle-brackets".to_string(), ContextId { index: 606 });
    v.insert("preprocessor-macro-define".to_string(), ContextId { index: 643 });
    v.insert("#anon_generic-type_0".to_string(), ContextId { index: 463 });
    v.insert("case-default".to_string(), ContextId { index: 558 });
    v.insert("#anon_data-structures-enum-definition_0".to_string(), ContextId { index: 442 });
    v.insert("#anon_negated-block_0".to_string(), ContextId { index: 509 });
    v.insert("data-structures-definition-common-end".to_string(), ContextId { index: 566 });
    v.insert("global-modifier".to_string(), ContextId { index: 600 });
    v.insert("preprocessor-rule-other-statements".to_string(), ContextId { index: 655 });
    v.insert("global-function-identifier".to_string(), ContextId { index: 597 });
    v.insert("#anon_generic-type_3".to_string(), ContextId { index: 466 });
    v.insert("#anon_function-call_1".to_string(), ContextId { index: 456 });
    v.insert("#anon_global_0".to_string(), ContextId { index: 479 });
    v.insert("#anon_template_1".to_string(), ContextId { index: 547 });
    v.insert("#anon_template_2".to_string(), ContextId { index: 548 });
    v.insert("unique-modifiers".to_string(), ContextId { index: 668 });
    v.insert("unique-constants".to_string(), ContextId { index: 665 });
    v.insert("data-structures-enum-definition-after-identifier".to_string(), ContextId { index: 568 });
    v.insert("#anon_numbers_1".to_string(), ContextId { index: 511 });
    v.insert("unique-variables".to_string(), ContextId { index: 671 });
    v.insert("preprocessor-if-branch-function-call-arguments".to_string(), ContextId { index: 639 });
    v.insert("function-call".to_string(), ContextId { index: 587 });
    v.insert("#anon_function-call_2".to_string(), ContextId { index: 457 });
    v.insert("constants".to_string(), ContextId { index: 560 });
    v.insert("data-structures-function-identifier-generic".to_string(), ContextId { index: 570 });
    v.insert("members-inside-function-call".to_string(), ContextId { index: 614 });
    v.insert("#anon_members-after-accessor-junction_0".to_string(), ContextId { index: 488 });
    v.insert("#anon_data-structures-union-definition-after-identifier_0".to_string(), ContextId { index: 453 });
    v.insert("#anon_data-structures-modifier_2".to_string(), ContextId { index: 448 });
    v.insert("#anon_modifiers-parens_3".to_string(), ContextId { index: 505 });
    v.insert("#anon_keywords-angle-brackets_1".to_string(), ContextId { index: 486 });
    v.insert("#anon_keywords-parens_0".to_string(), ContextId { index: 487 });
    v.insert("#anon_numbers_4".to_string(), ContextId { index: 514 });
    v.insert("#anon_preprocessor-rule-disabled-global_2".to_string(), ContextId { index: 531 });
    v.insert("early-expressions-after-generic-type".to_string(), ContextId { index: 581 });
    v.insert("hexadecimal-suffix".to_string(), ContextId { index: 602 });
    v.insert("#anon_global-type_0".to_string(), ContextId { index: 476 });
    v.insert("#anon_global-type_2".to_string(), ContextId { index: 478 });
    v.insert("#anon_generic-type_1".to_string(), ContextId { index: 464 });
    v.insert("#anon_generic-type_7".to_string(), ContextId { index: 470 });
    v.insert("function-trailing-return-type-parens".to_string(), ContextId { index: 594 });
    v.insert("preprocessor-global".to_string(), ContextId { index: 637 });
    v.insert("#anon_preprocessor-rule-other-statements_0".to_string(), ContextId { index: 545 });
    v.insert("#anon_preprocessor-rule-disabled-global_1".to_string(), ContextId { index: 530 });
    v.insert("#anon_preprocessor-rule-disabled-global_0".to_string(), ContextId { index: 529 });
    v.insert("#anon_preprocessor-rule-enabled-statements_0".to_string(), ContextId { index: 541 });
    v.insert("preprocessor-if-branch-statements".to_string(), ContextId { index: 642 });
    v.insert("#anon_data-structures-type_0".to_string(), ContextId { index: 452 });
    v.insert("method-definition-trailing-return".to_string(), ContextId { index: 618 });
    v.insert("#anon_global_4".to_string(), ContextId { index: 483 });
    v.insert("#anon_preprocessor-other_0".to_string(), ContextId { index: 521 });
    v.insert("brackets".to_string(), ContextId { index: 557 });
    v.insert("#anon_typedef_0".to_string(), ContextId { index: 549 });
    v.insert("late-expressions-before-function-call".to_string(), ContextId { index: 609 });
    v.insert("#anon_data-structures-function-identifier-generic_0".to_string(), ContextId { index: 443 });
    v.insert("preprocessor-if-branch-function-call".to_string(), ContextId { index: 638 });
    v.insert("preprocessor-rule-enabled-global".to_string(), ContextId { index: 652 });
    v.insert("#anon_preprocessor-rule-enabled-statements_2".to_string(), ContextId { index: 543 });
    v.insert("data-structures-class-definition".to_string(), ContextId { index: 563 });
    v.insert("#anon_preprocessor-rule-enabled-data-structures_2".to_string(), ContextId { index: 537 });
    v.insert("global-function-identifier-generic".to_string(), ContextId { index: 598 });
    v.insert("#anon_preprocessor-macro-define_1".to_string(), ContextId { index: 518 });
    v.insert("#anon_data-structures-modifier_1".to_string(), ContextId { index: 447 });
    v.insert("data-structures-union-definition".to_string(), ContextId { index: 577 });
    v.insert("preprocessor-rule-enabled-data-structures".to_string(), ContextId { index: 651 });
    v.insert("data-structures-struct-definition".to_string(), ContextId { index: 574 });
    v.insert("preprocessor-statements".to_string(), ContextId { index: 656 });
    v.insert("#anon_preprocessor-convention-ignore-uppercase-ident-lines_0".to_string(), ContextId { index: 516 });
    v.insert("#anon_preprocessor-rule-enabled-data-structures_0".to_string(), ContextId { index: 535 });
    v.insert("#anon_numbers_2".to_string(), ContextId { index: 512 });
    v.insert("#anon_keywords-angle-brackets_0".to_string(), ContextId { index: 485 });
    v.insert("#anon_preprocessor-rule-enabled-global_1".to_string(), ContextId { index: 539 });
    v.insert("#anon_parens_0".to_string(), ContextId { index: 515 });
    v.insert("#anon_data-structures-union-definition_0".to_string(), ContextId { index: 454 });
    v.insert("typedef".to_string(), ContextId { index: 662 });
    v.insert("#anon_method-definition-params_0".to_string(), ContextId { index: 499 });
    v.insert("#anon_numbers_0".to_string(), ContextId { index: 510 });
    v.insert("function-definition-params".to_string(), ContextId { index: 590 });
    v.insert("#anon_modifiers-parens_2".to_string(), ContextId { index: 504 });
    v.insert("#anon_preprocessor-macro-define_0".to_string(), ContextId { index: 517 });
    v.insert("data-structures-modifier".to_string(), ContextId { index: 572 });
    v.insert("data-structures-modifier-friend".to_string(), ContextId { index: 573 });
    v.insert("main".to_string(), ContextId { index: 610 });
    v.insert("members-arrow".to_string(), ContextId { index: 612 });
    v.insert("#anon_preprocessor-other_3".to_string(), ContextId { index: 524 });
    v.insert("#anon_members-after-accessor-junction_4".to_string(), ContextId { index: 492 });
    v.insert("#anon_data-structures-enum-definition-after-identifier_0".to_string(), ContextId { index: 441 });
    v.insert("preprocessor-if-branch-global".to_string(), ContextId { index: 641 });
    v.insert("preprocessor-workaround-eat-macro-before-identifier".to_string(), ContextId { index: 657 });
    v.insert("#anon_angle-brackets_0".to_string(), ContextId { index: 432 });
    v.insert("global-maybe-function".to_string(), ContextId { index: 599 });
    v.insert("members-dot".to_string(), ContextId { index: 613 });
    v.insert("#anon_preprocessor-macro-definition_0".to_string(), ContextId { index: 519 });
    v.insert("preprocessor-rule-other-global".to_string(), ContextId { index: 654 });
    v.insert("strings".to_string(), ContextId { index: 659 });
    v.insert("#anon_data-structures-class-definition_0".to_string(), ContextId { index: 438 });
    v.insert("#anon_global-maybe-function_1".to_string(), ContextId { index: 472 });
    v.insert("#anon_method-definition-params_2".to_string(), ContextId { index: 501 });
    v.insert("data-structures-type".to_string(), ContextId { index: 576 });
    v.insert("preprocessor-practical-workarounds".to_string(), ContextId { index: 647 });
    v.insert("#anon_method-definition-continue_3".to_string(), ContextId { index: 497 });
    v.insert("#anon_unique-strings_0".to_string(), ContextId { index: 551 });
    v.insert("#anon_generic-type_2".to_string(), ContextId { index: 465 });
    v.insert("#anon_global_1".to_string(), ContextId { index: 480 });
    v.insert("#anon_preprocessor-rule-disabled-statements_1".to_string(), ContextId { index: 533 });
    v.insert("#anon_global-type_1".to_string(), ContextId { index: 477 });
    v.insert("preprocessor-rule-disabled-statements".to_string(), ContextId { index: 650 });
    v.insert("#anon_generic-type_5".to_string(), ContextId { index: 468 });
    v.insert("#anon_function-trailing-return-type-parens_0".to_string(), ContextId { index: 462 });
    v.insert("#anon_members-after-accessor-junction_2".to_string(), ContextId { index: 490 });
    v.insert("__main".to_string(), ContextId { index: 553 });
    v.insert("method-definition-params".to_string(), ContextId { index: 617 });
    v.insert("negated-block".to_string(), ContextId { index: 622 });
    v.insert("preprocessor-macro-params".to_string(), ContextId { index: 645 });
    v.insert("using-namespace".to_string(), ContextId { index: 673 });
    v.insert("#anon_namespace_2".to_string(), ContextId { index: 508 });
    v.insert("preprocessor-block-finish-global".to_string(), ContextId { index: 626 });
    v.insert("#anon_using-namespace_0".to_string(), ContextId { index: 552 });
    v.insert("#anon_global_5".to_string(), ContextId { index: 484 });
    v.insert("#anon_function-call_0".to_string(), ContextId { index: 455 });
    v.insert("#anon_modifiers-parens_0".to_string(), ContextId { index: 502 });
    v.insert("function-specifiers".to_string(), ContextId { index: 592 });
    v.insert("block".to_string(), ContextId { index: 556 });
    v.insert("#anon_method-definition-continue_1".to_string(), ContextId { index: 495 });
    v.insert("#anon_function-definition-params_1".to_string(), ContextId { index: 460 });
    v.insert("function-definition-body".to_string(), ContextId { index: 588 });
    v.insert("preprocessor-block-if-branch-statements".to_string(), ContextId { index: 631 });
    v.insert("#anon_global-maybe-function_0".to_string(), ContextId { index: 471 });
    v.insert("#anon_preprocessor-rule-enabled-global_2".to_string(), ContextId { index: 540 });
    v.insert("data-structures-struct-definition-after-identifier".to_string(), ContextId { index: 575 });
    v.insert("expressions-minus-generic-type".to_string(), ContextId { index: 585 });
    v.insert("data-structures-function-identifier".to_string(), ContextId { index: 569 });
    v.insert("#anon_preprocessor-rule-enabled-statements_1".to_string(), ContextId { index: 542 });
    v.insert("#anon_modifiers-parens_1".to_string(), ContextId { index: 503 });
    v.insert("#anon_template_0".to_string(), ContextId { index: 546 });
    v.insert("data-structures-enum-definition".to_string(), ContextId { index: 567 });
    v.insert("preprocessor-rule-disabled-data-structures".to_string(), ContextId { index: 648 });
    v.insert("unique-keywords".to_string(), ContextId { index: 666 });
    v.insert("function-definition-trailing-return".to_string(), ContextId { index: 591 });
    v.insert("#anon_preprocessor-rule-disabled-statements_2".to_string(), ContextId { index: 534 });
    v.insert("method-definition-continue".to_string(), ContextId { index: 616 });
    v.insert("#anon_data-structures-struct-definition_0".to_string(), ContextId { index: 451 });
    v.insert("#anon_generic-type_6".to_string(), ContextId { index: 469 });
    v.insert("#anon_members-after-accessor-junction_1".to_string(), ContextId { index: 489 });
    v.insert("#anon_global_2".to_string(), ContextId { index: 481 });
    v.insert("expressions-minus-generic-type-function-call".to_string(), ContextId { index: 586 });
    v.insert("generic-type".to_string(), ContextId { index: 595 });
    v.insert("unique-late-expressions".to_string(), ContextId { index: 667 });
    v.insert("operators".to_string(), ContextId { index: 624 });
    v.insert("late-expressions".to_string(), ContextId { index: 608 });
    v.insert("template-common".to_string(), ContextId { index: 661 });
    v.insert("#anon_method-definition-continue_0".to_string(), ContextId { index: 494 });
    v.insert("#anon_data-structures-maybe-method_0".to_string(), ContextId { index: 444 });
    v.insert("#anon_numbers_3".to_string(), ContextId { index: 513 });
    v.insert("#anon_global-modifier_1".to_string(), ContextId { index: 474 });
    v.insert("angle-brackets".to_string(), ContextId { index: 555 });
    v.insert("keywords-parens".to_string(), ContextId { index: 607 });
    v.insert("preprocessor-macro-definition".to_string(), ContextId { index: 644 });
    v.insert("modifiers".to_string(), ContextId { index: 619 });
    v.insert("preprocessor-block-finish-if-branch-global".to_string(), ContextId { index: 627 });
    v.insert("#anon_method-definition-continue_4".to_string(), ContextId { index: 498 });
    v.insert("early-expressions".to_string(), ContextId { index: 580 });
    v.insert("comments".to_string(), ContextId { index: 559 });
    v.insert("#anon_case-default_0".to_string(), ContextId { index: 435 });
    v.insert("function-definition-continue".to_string(), ContextId { index: 589 });
    v.insert("function-trailing-return-type".to_string(), ContextId { index: 593 });
    v.insert("identifiers".to_string(), ContextId { index: 604 });
    v.insert("types".to_string(), ContextId { index: 663 });
    v.insert("global-type".to_string(), ContextId { index: 601 });
    v.insert("unique-types".to_string(), ContextId { index: 670 });
    v.insert("preprocessor-rule-enabled-statements".to_string(), ContextId { index: 653 });
    v.insert("#anon_preprocessor-macro-params_0".to_string(), ContextId { index: 520 });
    v.insert("data-structures-body".to_string(), ContextId { index: 562 });
    v.insert("#anon_global-modifier_2".to_string(), ContextId { index: 475 });
    v.insert("members-after-accessor-junction".to_string(), ContextId { index: 611 });
    v.insert("statements".to_string(), ContextId { index: 658 });
    v.insert("using-alias".to_string(), ContextId { index: 672 });
    v.insert("unique-strings".to_string(), ContextId { index: 669 });
    v.insert("expressions-minus-function-call".to_string(), ContextId { index: 584 });
    v.insert("data-structures-class-definition-after-identifier".to_string(), ContextId { index: 564 });
    v.insert("#anon_brackets_0".to_string(), ContextId { index: 434 });
    v.insert("#anon_preprocessor-other_4".to_string(), ContextId { index: 525 });
    v.insert("data-structures-union-definition-after-identifier".to_string(), ContextId { index: 578 });
    v.insert("#anon_method-definition-continue_2".to_string(), ContextId { index: 496 });
    v.insert("namespace".to_string(), ContextId { index: 621 });
    v.insert("#anon_function-definition-params_2".to_string(), ContextId { index: 461 });
    v.insert("#anon_namespace_0".to_string(), ContextId { index: 506 });
    v.insert("#anon_preprocessor-rule-disabled-statements_0".to_string(), ContextId { index: 532 });
    v.insert("__start".to_string(), ContextId { index: 554 });
    v.insert("preprocessor-elif-else-branch-statements".to_string(), ContextId { index: 635 });
    v.insert("variables".to_string(), ContextId { index: 674 });
    v.insert("#anon_preprocessor-rule-disabled-data-structures_2".to_string(), ContextId { index: 528 });
    v.insert("identifier-path-generic".to_string(), ContextId { index: 603 });
    v.insert("preprocessor-data-structures".to_string(), ContextId { index: 633 });
    v.insert("global".to_string(), ContextId { index: 596 });
    v.insert("#anon_function-definition-body_0".to_string(), ContextId { index: 458 });
    v.insert("#anon_data-structures-class-definition-after-identifier_0".to_string(), ContextId { index: 437 });
    v.insert("#anon_preprocessor-other_2".to_string(), ContextId { index: 523 });
    v.insert("#anon_preprocessor-rule-enabled-data-structures_1".to_string(), ContextId { index: 536 });
    v.insert("parens".to_string(), ContextId { index: 625 });
    v.insert("data-structures-definition-common-begin".to_string(), ContextId { index: 565 });
    v.insert("#anon_data-structures-modifier_3".to_string(), ContextId { index: 449 });
    v.insert("#anon_preprocessor-rule-disabled-data-structures_1".to_string(), ContextId { index: 527 });
    v.insert("#anon_function-definition-params_0".to_string(), ContextId { index: 459 });
    v.insert("preprocessor-elif-else-branch-global".to_string(), ContextId { index: 634 });
    v.insert("types-parens".to_string(), ContextId { index: 664 });
    v.insert("#anon_preprocessor-rule-disabled-data-structures_0".to_string(), ContextId { index: 526 });
    v.insert("template".to_string(), ContextId { index: 660 });
    v.insert("#anon_data-structures-modifier-friend_0".to_string(), ContextId { index: 445 });
    v.insert("#anon_method-definition-body_0".to_string(), ContextId { index: 493 });
    v.insert("#anon_types-parens_0".to_string(), ContextId { index: 550 });
    v
  }
} }